<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Cloud Gateway实践体验</title>
      <link href="/2019/06/19/spring-cloud-gateway-shi-jian-ti-yan/"/>
      <url>/2019/06/19/spring-cloud-gateway-shi-jian-ti-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="整体介绍"><a href="#整体介绍" class="headerlink" title="整体介绍"></a>整体介绍</h1><p>Spring Cloud Gateway是Spring Cloud官方推出的第二代网关框架，从官网给出的对比分析结果来看，Gateway比Zuul的性能要好很多，而且功能也更加丰富。<br>以下是官方对比Gateway、Zuul、Linkered的分析结果，可以看到Gateway是三个钟效果性能最好的。<br><img src="index_files/6d6126e2-d7ad-4b34-9332-9fae013aaafb.png" alt=""></p><p>从官网给出的图中可以看到客户端向Spring Cloud Gateway发出请求，然后网关转发给代理的服务，然后在将服务响应的结果返回给客户端。而且Gateway内部还有一系列的处理。</p><p><img src="https://raw.githubusercontent.com/spring-cloud/spring-cloud-gateway/master/docs/src/main/asciidoc/images/spring_cloud_gateway_diagram.png" alt=""></p><a id="more"></a><p>请求进来后，会首先由Gateway Handler Mapping进行处理，这里处理的过程中用到 <strong>predicate</strong>，通过的请求才发送到Gateway web handler做进一步处理。然后又会经过一系列的过滤器。过滤器和Zuul的类似，也有”pre”、”post”分类。</p><ul><li>“pre”代表在请求前之前进行过滤处理</li><li>“post”代表在请求之后进行过滤处理<br>一般我们在执行“pre”过滤器时，会进行鉴权、限流、日志输出等功能，以及请求头的更改、协议的转换；在请求之后执行“post”过滤器时，会对数据进行修改，比如响应头、协议的转换等。<br>整个过程中有两个比较重要的概念就是<strong>predicate</strong> 和 <strong>filter</strong>，filter比较好理解，下面来介绍一下predicate。</li></ul><h2 id="predicate"><a href="#predicate" class="headerlink" title="predicate"></a>predicate</h2><p>predicate在JDK8中的定义如下：</p><blockquote><p>Predicate<t> 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将Predicate组合成其他复杂的逻辑（比如：与，或，非）。可以用于接口请求参数校验、判断新老数据是否有变化需要进行更新操作。add–与、or–或、negate–非</t></p></blockquote><p>predicate这种输入类型属于Spring体系中的ServerWebExchange，它允许我们匹配HTTP请求中的任何内容，比如请求头或参数。而且Spring Cloud Gateway已经内置了很多Predict,这些Predict的源码在org.springframework.cloud.gateway.handler.predicate包中。具体可参考如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/12191355-7c74ff861a209cd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="">（图片来源网络）</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>准备三个工程</p><ul><li>leon-eureka 注册中心项目</li><li>leon-consumer 微服务项目</li><li>leon-gateway 网关项目</li></ul><p>因为spring cloud gateway项目只支持spring boot 2.0以上版本，所以对spring cloud的版本也有要求。本文中使用的整体版本环境为：</p><ul><li>spring boot ：2.0.5</li><li>spring cloud ： Finchley.SR1</li></ul><p>（以上项目创建不在赘述，可参考案例工程），运行效果后，保证leon-gateway、leon-consumer都已经注册在leon-eureka服务上。<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190527104322.png" alt=""></p><p>在leon-consumer中提供login接口，进行简单的登录验证：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String username<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"leon"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"888"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"登录成功"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"登录失败"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h2><p>在此版本上，添加注册中心客户端以来的包和版本</p><pre class=" language-yml"><code class="language-yml"><dependency>    <groupId>org.springframework.cloud</groupId>    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId></dependency></code></pre><p>另外在leon-gateway中不能添加 web 依赖包，如下：</p><pre class=" language-yml"><code class="language-yml"><dependency>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-starter-web</artifactId></dependency></code></pre><p>添加后启动会报错：</p><pre class=" language-java"><code class="language-java">Description<span class="token operator">:</span>Parameter <span class="token number">0</span> of method modifyRequestBodyGatewayFilterFactory in org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GatewayAutoConfiguration required a bean of type <span class="token string">'org.springframework.http.codec.ServerCodecConfigurer'</span> that could not be found<span class="token punctuation">.</span>Action<span class="token operator">:</span>Consider defining a bean of type <span class="token string">'org.springframework.http.codec.ServerCodecConfigurer'</span> in your configuration<span class="token punctuation">.</span></code></pre><blockquote><p>因为Spring Cloud Gateway 是使用 netty+webflux实现，webflux与web是冲突的。</p></blockquote><p>接下来我们在项目中实际使用gateway，通过gateway转发路由，将请求转发到leon-consumer中。</p><h1 id="Route-Predicate"><a href="#Route-Predicate" class="headerlink" title="Route Predicate"></a>Route Predicate</h1><p>Predicate的分类比较多，接下来在项目总一一使用。</p><h2 id="3-1-After-Route-Predicate-Factory"><a href="#3-1-After-Route-Predicate-Factory" class="headerlink" title="3.1 After Route Predicate Factory"></a>3.1 After Route Predicate Factory</h2><p>接收一个日期类型参数，在这个日期之后可以通过。<br>在配置文件(application.yml)中添加</p><pre class=" language-yml"><code class="language-yml">spring:  application:    name: leon-gateway  cloud:    gateway:      routes:      - id: dev        uri: http://localhost:8081/login?username=leon&password=888        predicates:        - After=2020-05-20T17:42:47.789-07:00[America/Denver]</code></pre><ul><li>id 为路由route的唯一标识。（这次测试不添加也可以，后续测试多个route是否必须添加）</li><li>uri 为转发请求的地址</li><li>predicates 为请求谓词，此处是在指定时间之后</li></ul><p>现在时间为2019-05，所以是在指定时间之前，此时启动服务，我们访问<a href="http://localhost:8085/" target="_blank" rel="noopener">http://localhost:8085/</a><br>可以看到转发请求后出现404错误，</p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190527113740.png" alt=""></p><p>然后我们修改时间为2018</p><pre class=" language-yml"><code class="language-yml">spring:  application:    name: leon-gateway  cloud:    gateway:      routes:      - id: dev        uri: http://localhost:8081/login?username=leon&password=888        predicates:        - After=2018-05-20T17:42:47.789-07:00[America/Denver]</code></pre><p>重启服务后再次访问：<a href="http://localhost:8085/" target="_blank" rel="noopener">http://localhost:8085/</a><br>可以看到已经转发到leon-consumer的login接口，并能够收到正确返回信息<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190527113624.png" alt=""></p><h2 id="3-2-Before-Route-Predicate-Factory"><a href="#3-2-Before-Route-Predicate-Factory" class="headerlink" title="3.2 Before Route Predicate Factory"></a>3.2 Before Route Predicate Factory</h2><p>在指定时间之前才能通过转发，具体效果类似，不在赘述</p><pre class=" language-yml"><code class="language-yml">spring:  cloud:    gateway:      routes:      - id: before_route        uri: http://localhost:8081/login?username=leon&password=888        predicates:        - Before=2019-01-20T17:42:47.789-07:00[America/Denver]</code></pre><h2 id="3-3-Between-Route-Predicate-Factory"><a href="#3-3-Between-Route-Predicate-Factory" class="headerlink" title="3.3 Between Route Predicate Factory"></a>3.3 Between Route Predicate Factory</h2><p>在指定范围时间之内的请求才能通过转发。接收两个日期参数，并且参数的形式，必须是较早的日期在前，较晚的日期在后，具体如下</p><pre class=" language-yml"><code class="language-yml">spring:  cloud:    gateway:      routes:      - id: between_route        uri: http://localhost:8081/login?username=leon&password=888        predicates:        - Between=2017-01-20T17:42:47.789-07:00[America/Denver], 2017-01-21T17:42:47.789-07:00[America/Denver]</code></pre><h2 id="3-4-Cookie-Route-Predicate-Factory"><a href="#3-4-Cookie-Route-Predicate-Factory" class="headerlink" title="3.4 Cookie Route Predicate Factory"></a>3.4 Cookie Route Predicate Factory</h2><p>cookiel谓词工厂接收两个参数，Cookie名称和值（也可以是正则表达式）。请求中必须包含给定名称的cookie，并且cookie值要符合给定的值（正则规则）才能通过转发。<br>通过postman添加cookie进行测试如下。<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190527115213.png" alt=""><br>如果参数值不对同样会报404问题。</p><h2 id="3-5-Header-Route-Predicate-Factory"><a href="#3-5-Header-Route-Predicate-Factory" class="headerlink" title="3.5 Header Route Predicate Factory"></a>3.5 Header Route Predicate Factory</h2><p>同样需要2个参数，一个是header名称，另外一个header值（可以为正则表达式），匹配通过后才转发</p><pre class=" language-yml"><code class="language-yml">      - id: header_route        uri: http://localhost:8081/login?username=leon&password=888        predicates:        - Header=X-Request-Id, \d+</code></pre><p>在Header中必须要有X-Request-Id名称的参数，并且值要满足正则规则，必须为数字</p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190527115726.png" alt=""></p><h2 id="3-6-Host-Route-Predicate-Factory"><a href="#3-6-Host-Route-Predicate-Factory" class="headerlink" title="3.6 Host Route Predicate Factory"></a>3.6 Host Route Predicate Factory</h2><p>只接收一个参数，就是host name，可以使用”.”来进行匹配，此参数在head中添加</p><pre class=" language-yml"><code class="language-yml">       - id: host_route        uri: http://localhost:8081/login?username=leon&password=888        predicates:        - Host=**.leon.cn</code></pre><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190527131654.png" alt=""></p><h2 id="3-7-Method-Route-Predicate-Factory"><a href="#3-7-Method-Route-Predicate-Factory" class="headerlink" title="3.7 Method Route Predicate Factory"></a>3.7 Method Route Predicate Factory</h2><p>接收一个参数，代表请求的类型。</p><pre class=" language-yml"><code class="language-yml">      - id: method_route        uri: http://localhost:8081/login?username=leon&password=888        predicates:        - Method=GET</code></pre><p>此时所有的GET请求都会转发，如果是POST请求就会404<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190527132251.png" alt=""></p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190527132313.png" alt=""></p><h2 id="3-8-Path-Route-Predicate-Factory"><a href="#3-8-Path-Route-Predicate-Factory" class="headerlink" title="3.8 Path Route Predicate Factory"></a>3.8 Path Route Predicate Factory</h2><p>接收一个参数，就是路径地址（可以为正则表达式）</p><pre class=" language-yml"><code class="language-yml">      - id: path_route        uri: http://localhost:8081/login?username=leon&password=888        predicates:        - Path=/leon/{segment}</code></pre><p>所有的请求路径满足/leon/{segment}的请求将会匹配并被路由，比如/leon/1 、/leon/bar的请求，将会命中匹配，并成功转发。<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190527132732.png" alt=""></p><h2 id="3-9-Query-Route-Predicate-Factory"><a href="#3-9-Query-Route-Predicate-Factory" class="headerlink" title="3.9 Query Route Predicate Factory"></a>3.9 Query Route Predicate Factory</h2><p>需要两个参数，一个是参数名，一个是参数值（正则表达式）。</p><pre class=" language-yml"><code class="language-yml">      - id: query_route        uri: http://localhost:8081/login?username=leon&password=888        predicates:        - Query=name, leon.</code></pre><p>上面配置了请求中含有参数name，并且name的值匹配leon.，则进行转发<br>比如请求参数为name=leon8、name=leono、name=leon静都可以匹配<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190527134858.png" alt=""></p><p>也可以只加一个参数，代表只验证参数名称，不验证参数值。只要包含指定名称的参数即可通过转发。</p><h2 id="3-10-RemoteAddr-Route-Predicate-Factory"><a href="#3-10-RemoteAddr-Route-Predicate-Factory" class="headerlink" title="3.10 RemoteAddr Route Predicate Factory"></a>3.10 RemoteAddr Route Predicate Factory</h2><p>接收一个字符串参数，此字符串代表地址列表（最少1个），只有是以上要求的IP地址发来的请求才通过转发</p><pre class=" language-yml"><code class="language-yml">      - id: remoteaddr_route        uri: http://localhost:8081/login?username=leon&password=888        predicates:        - RemoteAddr=172.17.153.1/24</code></pre><p>以上配置表明只有IP地址为172.17.153.1、172.17.153.2、172.17.153.3、。。。172.17.153.24可以通过转发。</p><h2 id="3-11-组合"><a href="#3-11-组合" class="headerlink" title="3.11 组合"></a>3.11 组合</h2><p>可以同时配置多个predicates，如果一个请求满足多个路由的谓词条件时，请求只会被首个成功匹配的路由转发。<br>我们在leon-consumer项目中添加接口方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/info"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"获取信息成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后在leon-gatewa重视添加两个</p><pre class=" language-yml"><code class="language-yml">spring:  application:    name: leon-gateway  cloud:    gateway:      routes:      - id: header_route        uri: http://localhost:8081/login?username=leon&password=888        predicates:        - Header=X-Request-Id, \d+      - id: query_route        uri: http://localhost:8081/info        predicates:        - Query=name, leon.</code></pre><p>这里我们同时添加了header_route、query_route，然后我们在postman中发送请求，同时满足两个条件：<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190527145811.png" alt=""><br>结果可见是按照header_route来进行转发。</p><p>我们把两个条件顺序互换：</p><pre class=" language-yml"><code class="language-yml">  cloud:    gateway:      routes:      - id: query_route        uri: http://localhost:8081/info        predicates:        - Query=name, leon.      - id: header_route        uri: http://localhost:8081/login?username=leon&password=888        predicates:        - Header=X-Request-Id, \d+</code></pre><p>重启服务，然后再次访问，相同的请求这次被转发到info接口。<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190527150238.png" alt=""></p><p>当然如果设置多个路由谓词，第一个满足优先转发，如果第一个不满足会继续往下判断，遇到满足的进行转发，我们把请求条件改成不合适，则准发第二个接口。<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190527150430.png" alt=""></p><p>以上的配置类似”or”的条件，我们还可以配置组合使用，达到”and”的效果，要同时满足才能进行转发。</p><pre class=" language-yml"><code class="language-yml">  cloud:    gateway:      routes:      - id: zuhe_route        uri: http://localhost:8081/info        predicates:        - Query=name, leon.        - Header=X-Request-Id, \d+</code></pre><p>此时如果有一个参数设置不对，那么就不会进行转发</p><h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><p>Predict决定了请求由哪一个路由处理，在路由处理之前，需要经过“pre”类型的过滤器处理，处理返回响应之后，可以由“post”类型的过滤器处理。</p><p>在Spring Cloud Gateway中，filter从作用范围可分为另外两种，一种是针对于单个路由的gateway filter，它在配置文件中的写法同predict类似；另外一种是针对于所有路由的global gateway filer，全局的filter。现在来分别介绍。</p><h2 id="GatewayFilter"><a href="#GatewayFilter" class="headerlink" title="GatewayFilter"></a>GatewayFilter</h2><p>GatewayFilter的使用同Predicate类似，都是在配置文件application.yml中配置即可。这里选择几个常用介绍，更多的配置可参考官方文档： <a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.0.0.RELEASE/single/spring-cloud-gateway.html" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.0.0.RELEASE/single/spring-cloud-gateway.html</a></p><h3 id="4-1-AddRequestHeader-GatewayFilter-Factory"><a href="#4-1-AddRequestHeader-GatewayFilter-Factory" class="headerlink" title="4.1 AddRequestHeader GatewayFilter Factory"></a>4.1 AddRequestHeader GatewayFilter Factory</h3><p>在网关中添加Filter</p><pre class=" language-yml"><code class="language-yml">   cloud:    gateway:      routes:      - id: zuhe_route        uri: http://localhost:8081/info        predicates:        - Query=name, leon.        - Header=X-Request-Id, \d+        filters:        - AddRequestHeader=X-Request-Foo, Bar</code></pre><p>这里我们添加了AddRequestHeader过滤器，在请求转发后给HEADER中添加参数X-Request-Foo，值为：Bar。</p><p>改造leon-consuemr工程</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/info"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">info</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String header <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"X-Request-Foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"获取信息成功:"</span> <span class="token operator">+</span> header<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到，我们在路由转发后的处理方法中获取相关参数。然后发送请求，这个请求我们只满足路由转发条件，并没有添加X-Request-Foo的HEADER参数，但是我们在转发后服务处理中是可以获取到的。<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190527153819.png" alt=""></p><p>其他更多的设置暂不涉及，请参考官方文档。</p><h2 id="Global-Filters"><a href="#Global-Filters" class="headerlink" title="Global Filters"></a>Global Filters</h2><p>全局过滤器，不需要在配置文件中配置，作用在所有的路由上。Gatewqy内置的GlobalFilter如下：<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190527154706.png" alt=""></p><p><img src="https://raw.githubusercontent.com/guofazhan/image/master/GlobalFilter.png" alt="">)(图片来源网络)</p><p>如果想要自己实现GlobalFilter也可以，实现GlobalFilter和Ordered接口即可。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalFilter</span> <span class="token keyword">implements</span> <span class="token class-name">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>GlobalFilter</span><span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String token <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">==</span> null <span class="token operator">||</span> token<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"token为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>UNAUTHORIZED<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在启动类中添加配置，将配置类加入容器管理。</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> GlobalFilter <span class="token function">globalFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>此时发情请求，可以发现如果HEADER中没有token参数，则无法通过转发。<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190527160007.png" alt=""></p><h1 id="项目综合使用"><a href="#项目综合使用" class="headerlink" title="项目综合使用"></a>项目综合使用</h1><p>使用过Zuul的同学都了解，在Zuul中可以配置统一前置路由，比如现在我们想把所有路径中包含/user的都转发到leon-consumer工程去处理。<br>在以上的项目中继续改造，在leon-consumer项目中添加前缀映射：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String username<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"leon"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"888"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"登录成功"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"登录失败"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">info</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String header <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"X-Request-Foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"获取信息成功:"</span> <span class="token operator">+</span> header<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在leon-gateway中添加配置：</p><pre class=" language-yml"><code class="language-yml">  cloud:    gateway:      routes:      - id: path_route        uri: lb://leon-consumer #服务名，注意一定要以lb://开头        predicates:        - Path=/user/{segment}        filters:        - AddRequestHeader=X-Request-Foo, Bar      discovery:        locator:          enabled: true #设置可以通过服务名获取服务          lower-case-service-id: true #设置获取服务可以通过小写形式</code></pre><p>在前面我们的uri都是直接写好的具体的地址，现在的服务已经注册到Eureka上，我们也可以通过服务名称找到具体的服务。<br>添加配置</p><pre class=" language-yml"><code class="language-yml">      discovery:        locator:          enabled: true #设置可以通过服务名获取服务</code></pre><p>通过<strong>lb:</strong>指定即可。默认配置的名称必须是全大写，想要通过小写识别，可添加配置</p><pre class=" language-yml"><code class="language-yml">      discovery:        locator:          lower-case-service-id: true #设置获取服务可以通过小写形式</code></pre><p>配置完成后，重启服务访问：<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190527171808.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos上手实践（基于Spring Cloud）</title>
      <link href="/2019/06/17/nacos-shang-shou-shi-jian-ji-yu-spring-cloud/"/>
      <url>/2019/06/17/nacos-shang-shou-shi-jian-ji-yu-spring-cloud/</url>
      
        <content type="html"><![CDATA[<h1 id="Nacos介绍"><a href="#Nacos介绍" class="headerlink" title="Nacos介绍"></a>Nacos介绍</h1><p>Nacos是阿里出品的帮助发现、配置和管理微服务的一款产品，而且这应该是所有服务发现与管理产品中中文文档最为友好的，你完全直接去官网查看，中文手册用起来就是爽！</p><p>本文主要会快速上手入门使用Nacos,并结合项目（Spring Cloud）来进行开发。</p><h1 id="安装Nacos"><a href="#安装Nacos" class="headerlink" title="安装Nacos"></a>安装Nacos</h1><p>下载对应系统的包，windows下双击 startup.cmd 即可运行，运行成功如图，默认为8848端口<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523144041.png" alt=""></p> <a id="more"></a><p>Nacos默认提供了控制台管理，访问地址：<a href="http://127.0.0.1:8848/nacos" target="_blank" rel="noopener">http://127.0.0.1:8848/nacos</a> 可以看到：<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523145139.png" alt=""></p><p>默认用户命和密码都为：nacos，登录进入后可看到管理界面</p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523145407.png" alt=""></p><h1 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h1><p>以下为 Nacoas 提供的一个服务发现的说明图。<br><img src="https://cdn.nlark.com/lark/0/2018/png/15914/1542119181336-b6dc0fc1-ed46-43a7-9e5f-68c9ca344d60.png" alt="echo service"></p><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>创建provider项目：leon-provider，指定Spring Boot版本为1.5.21，然后添加Nacos的相关依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${latest.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>这里需要注意各个版本的对应关系<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523145737.png" alt=""></p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523145815.png" alt=""></p><p>我们的spring boot是属于1.5.X的序列，所以对应的spring cloud的版本为：Spring Cloud Edgware 。<br>本位中使用的Nacos的版本为1.0.0，所以注意，如果需要引入spring cloud alibaba的相关依赖，那么就只能为特定三个版本。本文中使用0.1.2版本</p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523150045.png" alt=""></p><p>在leon-provider中添加spring cloud 的相关依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Edgware.SR5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span></code></pre><p>如果需要使用 Spring Cloud Edgware 版本，请在 dependencyManagement 中添加如下内容</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.1.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>指定Nacos相关依赖版本为0.1.2</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Edgware.SR5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>latest.version</span><span class="token punctuation">></span></span>0.1.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>latest.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><h2 id="配置Nacos服务地址"><a href="#配置Nacos服务地址" class="headerlink" title="配置Nacos服务地址"></a>配置Nacos服务地址</h2><p>在application.yml中配置Nacos服务信息：</p><pre class=" language-yml"><code class="language-yml">server:  port: 8080spring:  application:    name: leon-provider  cloud:    nacos:      discovery:        server-addr: localhost:8848</code></pre><p>给启动类添加注解：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span></code></pre><p>启动程序，运行成功后，可以看到Nacos中已经有了注册信息：<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523151224.png" alt=""><br>点击详情后可查看当前服务的IP、端口、健康状态等信息。</p><p>在leon-provider工程中创建LoginService类，提供简单的登录方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span> String userName<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"passWord"</span><span class="token punctuation">)</span> String passWord<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"leon"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> passWord<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"888"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"leon-provider: login success"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"leon-provider: login fail"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="创建Consumer工程"><a href="#创建Consumer工程" class="headerlink" title="创建Consumer工程"></a>创建Consumer工程</h2><p>创建leon-consumer工程，指定spring boot、Spring cloud版本和leon-provider一致，同时添加spring cloud feign依赖（关于Feign本文不在赘述）</p><p>添加Nacos的服务端IP和端口信息，</p><pre class=" language-yml"><code class="language-yml">server:  port: 8081spring:  application:    name: leon-consumer  cloud:    nacos:      discovery:        server-addr: localhost:8848</code></pre><p>在leon-consumer中创建Feign Client,通过name属性定义想要调用的服务名称</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"leon-provider"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserFeignClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/login"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span> String userName<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"passWord"</span><span class="token punctuation">)</span> String passWord<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建Controller类并调用接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserFeignClient userFeignClient<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用户账号名和密码登录     *     * @param userName     * @param passWord     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span> String userName<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"passWord"</span><span class="token punctuation">)</span> String passWord<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userFeignClient<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> passWord<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在启动类上添加注解 @EnableFeignClients，然后运行leon-consumer服务。刷新控制台，可以看到注册服务有两个：<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523153106.png" alt=""></p><p>访问leon-consumer中的login接口，查看是否能正常调用leon-provider服务。</p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523153945.png" alt=""></p><h2 id="管理服务"><a href="#管理服务" class="headerlink" title="管理服务"></a>管理服务</h2><p>在控制台中，选择leon-provider服务，进入详情后，可以选择将其下线<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523154621.png" alt=""></p><p>下线后再次访问接口，可以发现已经找不到对应的服务了。通过配置的方式可以优雅的实现服务上、下线。<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523154152.png" alt=""></p><p><strong>注意</strong></p><p>服务通过控制台下线，只是代表会在订阅端过滤掉，在控制台不受影响，所以即使下线服务，在控制台依然显示是健康的实例。如果我们停掉服务，就会发现变成红色为非健康实例了</p><hr><h1 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h1><p>Nacos同样提供了线上配置服务，新增配置<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523155659.png" alt=""></p><hr><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523165510.png" alt=""></p><hr><p>点击发布完成配置，然后返回可查看<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523164718.png" alt=""></p><p>在项目中添加依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${latest.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>在Controller中添加方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${name:}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${age:}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String age<span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/config"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NacosException <span class="token punctuation">{</span>    <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">" | "</span> <span class="token operator">+</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行程序访问</p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523165607.png" alt=""></p><p><strong>注意</strong></p><ul><li>其中dataId的名字需要和spring.application.name保持一致（出去后缀）</li><li>添加@RefreshScope注解才能实现动态刷新</li><li>配置服务的参数必须配置在bootstrap文件中</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud 基于Consul 实现配置服务</title>
      <link href="/2019/06/12/spring-cloud-ji-yu-consul-shi-xian-pei-zhi-fu-wu/"/>
      <url>/2019/06/12/spring-cloud-ji-yu-consul-shi-xian-pei-zhi-fu-wu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Cloud体系中提供了Config组件来进行配置服务管理。而Consul除了提供服务注册与发现功能外，同时也提供配置管理功能。本位将介绍如何结合Spring Cloud + Consul实现配置管理。</p></blockquote><blockquote><p>本文中使用的工程及环境参考上篇文章《Spring Cloud 基于Consul 实现服务注册与发现》</p></blockquote><h1 id="添加配置依赖"><a href="#添加配置依赖" class="headerlink" title="添加配置依赖"></a>添加配置依赖</h1><p>在leon-consumer项目中添加配置依赖</p><pre class=" language-shell"><code class="language-shell"><dependency>    <groupId>org.springframework.cloud</groupId>    <artifactId>spring-cloud-starter-consul-config</artifactId></dependency></code></pre><h1 id="添加项目配置"><a href="#添加项目配置" class="headerlink" title="添加项目配置"></a>添加项目配置</h1><p>新建bootstrap.yml文件，在文件中添加配置服务相关参数配置：</p><pre class=" language-shell"><code class="language-shell">spring:  application:    name: leon-consumer  cloud:    consul:      host: localhost      port: 8500      config:        enabled: true        format: yaml        prefix: config        default-context: leon-consumer        data-key: data</code></pre> <a id="more"></a><h1 id="添加配置文件及数据"><a href="#添加配置文件及数据" class="headerlink" title="添加配置文件及数据"></a>添加配置文件及数据</h1><p>新建application-dev.yml、application-test.yml配置文件，分别代表开发、测试环境配置文件，其中分别指定开发和测试环境的端口为8081、8082</p><pre class=" language-shell"><code class="language-shell">server:  port: 8081</code></pre><pre class=" language-shell"><code class="language-shell">server:  port: 8082</code></pre><p>然后在application.yml中指定想要启用的环境配置</p><pre class=" language-shell"><code class="language-shell">spring:  profiles:    active: test</code></pre><p>此时代表项目启动使用测试环境，服务应该运行在8082端口，整个配置文件体系结构如下：</p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523093606.png" alt=""></p><p>然后在web管理界面选择key/value，点击create，新增配置信息</p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523091506.png" alt=""></p><p>分别填入想要保存的配置信息，以key-value的形式保存</p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523093815.png" alt=""></p><p>这里key值需要和项目工程中的配置保持一致。</p><blockquote><p>仔细对比，相信都能明白字段对应的位置。建议先按照默认的配置，能够正常访问得到数据后在进行自由更改。</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">consul</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 开启配置管理服务</span>        <span class="token key atrule">format</span><span class="token punctuation">:</span> yaml  <span class="token comment" spellcheck="true"># 配置的格式，有四种选择</span>        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> config <span class="token comment" spellcheck="true"># 配置所在的应用目录名称</span>        <span class="token key atrule">default-context</span><span class="token punctuation">:</span> leon<span class="token punctuation">-</span>consumer <span class="token comment" spellcheck="true"># 服务名称，也就是spring.application.name的值</span>        <span class="token key atrule">data-key</span><span class="token punctuation">:</span> data <span class="token comment" spellcheck="true"># 默认为data，可以更改，需要和consul创建时保持一致</span></code></pre><p>填入value值后点击save保存即可。注意如果是YAML格式，那么数据间的冒号后要有空格。</p><h1 id="在项目中获取配置"><a href="#在项目中获取配置" class="headerlink" title="在项目中获取配置"></a>在项目中获取配置</h1><p>在leon-consumer项目中，新建ConfigController类，读取线上配置信息</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${dbName}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String dbName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${dbPassword}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String dbPassword<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getdbinfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getDBInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"数据库用户名："</span> <span class="token operator">+</span> dbName <span class="token operator">+</span> <span class="token string">" | 数据库密码: "</span> <span class="token operator">+</span> dbPassword<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行服务，然后访问接口getdbinfo,查看结果。注意此时我们运行是test环境，所以需要访问8082端口。<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523095010.png" alt=""></p><h1 id="自动刷新配置信息"><a href="#自动刷新配置信息" class="headerlink" title="自动刷新配置信息"></a>自动刷新配置信息</h1><p>能够获取到配置信息后，此时更改线上配置数据：</p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523095149.png" alt=""></p><p>此时我们刷新浏览器，访问getdbinfo接口是无法刷新数据的。想要能够实时刷新配置数据，需要在类上添加注解 @RefreshScope</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RefreshScope</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${dbName}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String dbName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${dbPassword}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String dbPassword<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getdbinfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getDBInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"数据库用户名："</span> <span class="token operator">+</span> dbName <span class="token operator">+</span> <span class="token string">" | 数据库密码: "</span> <span class="token operator">+</span> dbPassword<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>添加注解后，重新启动服务，然后测试下就线上配置数据更改后就可以自动更新了，不用在重启服务。</p><h1 id="复杂配置"><a href="#复杂配置" class="headerlink" title="复杂配置"></a>复杂配置</h1><p>上文中我们配置了简单的键值对信息，除此之外我们还可以配置复杂数据,更新配置数据：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">dbName</span><span class="token punctuation">:</span> leon<span class="token key atrule">dbPassword</span><span class="token punctuation">:</span> <span class="token number">666666</span><span class="token key atrule">user</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> leon  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>  <span class="token key atrule">desc</span><span class="token punctuation">:</span> 帅哥</code></pre><p>在项目中添加引用</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RefreshScope</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${dbName}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String dbName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${dbPassword}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String dbPassword<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${user.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${user.age}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${user.desc}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getuserinfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">" | "</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">" | "</span> <span class="token operator">+</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getdbinfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getDBInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"数据库用户名："</span> <span class="token operator">+</span> dbName <span class="token operator">+</span> <span class="token string">" | 数据库密码: "</span> <span class="token operator">+</span> dbPassword<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重新启动后，访问 getuserinfo 接口，可以看到能够正常访问<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523101840.png" alt=""></p><p>如果觉得这种方式比较繁琐（Java可是要面向对象的啊），可以通过一个对象类获取整个配置信息。<br>添加两个Bean类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...get/set方法</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigBean</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String dbName<span class="token punctuation">;</span>    <span class="token keyword">private</span> String dbPassword<span class="token punctuation">;</span>    <span class="token keyword">private</span> User user<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...get/set方法</span><span class="token punctuation">}</span></code></pre><p>注意此时已经给ConfigBean添加了注解：@ConfigurationProperties()<br>然后给启动类添加注解：@EnableConfigurationProperties(ConfigBean.class)</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>ConfigBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeonConsumerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>LeonConsumerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后就可以直接调用获取信息，在之前的Controller类中添加引用：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> ConfigBean configBean<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getallinfo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">getAllInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    StringBuilder allInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    allInfo<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>configBean<span class="token punctuation">.</span><span class="token function">getDbName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" | "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    allInfo<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>configBean<span class="token punctuation">.</span><span class="token function">getDbPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" | "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    allInfo<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>configBean<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" | "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    allInfo<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>configBean<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" | "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    allInfo<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>configBean<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" | "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> allInfo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>重新运行服务，然后访问接口查看信息 <a href="http://localhost:8082/getallinfo" target="_blank" rel="noopener">http://localhost:8082/getallinfo</a></p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523103527.png" alt=""></p><h2 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h2><p>在配置类中添加@ConfigurationProperties注解后会出现提示信息。<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523103714.png" alt=""></p><p><strong>此提示信息不影响项目运行。</strong><br>查询过后了解到是因为在注解中没有配置（prefix=””），没有指定 classpath 时，IDEA 提示没有找到 classpath，在spring boot1.5以上版本@ConfigurationProperties取消location注解，我们使用1.5.21版本所以会由此问题，可以在IDEA中配置取消提醒，具体方式可以参考文章：<a href="https://blog.csdn.net/expect521/article/details/77151094" target="_blank" rel="noopener">https://blog.csdn.net/expect521/article/details/77151094</a></p><h1 id="配置文件使用线上配置"><a href="#配置文件使用线上配置" class="headerlink" title="配置文件使用线上配置"></a>配置文件使用线上配置</h1><p>除去前面说的可以在项目代码中引用线上配置，同时还可以在配置文件中直接引用线上配置。<br>在项目中添加MySQL和Mybatis的依赖</p><pre class=" language-shell"><code class="language-shell"><dependency>    <groupId>org.mybatis.spring.boot</groupId>    <artifactId>mybatis-spring-boot-starter</artifactId>    <version>1.2.0</version></dependency><dependency>    <groupId>mysql</groupId>    <artifactId>mysql-connector-java</artifactId></dependency></code></pre><p>为了方便，复用之前的User类。在User类中添加id字段</p><pre class=" language-java"><code class="language-java">privata <span class="token keyword">long</span> id<span class="token punctuation">;</span></code></pre><p>在项目中添加Mapper类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> User <span class="token function">getDmUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在resource目录下添加配置文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.leon.leonconsumer.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getDmUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.leon.leonconsumer.config.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select                id as id,                name as name,                age as age，                description as description        from user        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>where<span class="token punctuation">"</span></span> <span class="token attr-name">prefixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>and | or<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and id=#{id}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>修改application-test.yml文件，添加mybatis和mysql的相关配置：</p><pre class=" language-yml"><code class="language-yml">server:  port: 8082mybatis:  mapper-locations: classpath:mapper/*Mapper.xmlspring:  datasource:    url: jdbc:mysql://localhost:3306/temp?useUnicode=true&characterEncoding=gbk&zeroDateTimeBehavior=convertToNull    username: ${dbName}    password: ${dbPassword}    driver-class-name: com.mysql.jdbc.Driver</code></pre><p>修改线上配置参数，配置正确的账号和密码<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523112515.png" alt=""></p><p>添加获取用户方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   User user <span class="token operator">=</span>  userMapper<span class="token punctuation">.</span><span class="token function">getDmUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>User定义的字段desc可能会和数据库关键字冲突，改成description.xml文件上文已改</strong></p><p>然后访问此方法，可以看到能够正常连接数据库获取信息：</p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523114110.png" alt=""></p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523114131.png" alt=""></p><p>同时我们还可以将整个配置信息都放到线上，这样每个项目都不需要在自己的项目中再单独配置。<br>将application-test.dev.yml中的数据库配置信息都删掉</p><p>然后将数据库配置都放到线上：</p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190523114516.png" alt=""></p><p>然后重新启动服务，发现正常运行，接口可以调用。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> Consul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud 基于Consul 实现服务注册与发现</title>
      <link href="/2019/06/12/spring-cloud-ji-yu-consul-shi-xian-fu-wu-zhu-ce-yu-fa-xian/"/>
      <url>/2019/06/12/spring-cloud-ji-yu-consul-shi-xian-fu-wu-zhu-ce-yu-fa-xian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Cloud自己体系中的注册中心为Eureka,同时也支持其它服务来进行服务注册与发现。本文介绍使用Consul来实现服务注册与发现，并整合进Spring Cloud项目中进行使用。</p></blockquote><blockquote><p>本文项目依赖环境版本为：</p><ul><li>Consul → 1.5.0</li><li>Spring Cloud → Edgware.SR5</li><li>Spring Boot → 1.5.21</li><li>操作系统 → Win10 （PowerShell）</li></ul></blockquote><h1 id="启动Consul服务"><a href="#启动Consul服务" class="headerlink" title="启动Consul服务"></a>启动Consul服务</h1><p>首先启动Consul服务，使用以下命令：</p><pre class=" language-shell"><code class="language-shell"> .\consul.exe agent -server -ui -bootstrap -client 0.0.0.0 -data-dir="d:\consul\data" -bind 127.0.0.1</code></pre><p>也可以使用开发模式（更加简单,自动开启UI服务，但是不能保存数据状态）</p><pre class=" language-shell"><code class="language-shell">  .\consul.exe agent -dev</code></pre> <a id="more"></a><p>服务启动成功后访问地址：<a href="http://localhost:8500" target="_blank" rel="noopener">http://localhost:8500</a> ，看到如下界面说明服务启动成功<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190522151533.png" alt=""></p><h1 id="创建Consumer项目"><a href="#创建Consumer项目" class="headerlink" title="创建Consumer项目"></a>创建Consumer项目</h1><p>新建Spring Boot项目，指定名称为：leon-consumer，在依赖中选择Web、Consul Discovery,版本选择为1.5.21<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190522151932.png" alt=""></p><p>修改配置文件application.yml,指定服务端口、名称、Consul服务地址</p><pre class=" language-shell"><code class="language-shell">server:  port: 8081spring:  application:    name: leon-consumer  cloud:    consul:      host: localhost      port: 8500</code></pre><p>启动程序，查看Consul web界面：<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190522152636.png" alt=""></p><p>此时可以看到服务已经注册到Consul上，但是发现后红色X提醒，点击进入可查看详细提示信息：<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190522153028.png" alt=""></p><p>可以看到错误提示是健康检查方面的提示，这是因为Consul进行健康检查需要依赖 Actuator 模块，在pom.xml中添加依赖</p><pre class=" language-shell"><code class="language-shell"><dependency>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-starter-actuator</artifactId></dependency></code></pre><p>然后重启程序，刷新浏览器再次观察，此时发现就已经全是正常状态<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190522153554.png" alt=""></p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190522153720.png" alt=""><br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190522153841.png" alt=""><br>点击后可以看到当前服务的具体的名称、IP、端口等信息。</p><h1 id="创建Provider程序"><a href="#创建Provider程序" class="headerlink" title="创建Provider程序"></a>创建Provider程序</h1><p>新建Spring Boot项目，指定名称为：leon-provider-1，在依赖中选择Web、Consul Discovery,版本选择为1.5.21<br>修改配置文件application.yml,指定服务端口、名称、Consul服务地址</p><pre class=" language-shell"><code class="language-shell">server:  port: 8082spring:  application:    name: leon-provider  cloud:    consul:      host: localhost      port: 8500</code></pre><p>添加监控依赖：</p><pre class=" language-shell"><code class="language-shell"><dependency>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-starter-actuator</artifactId></dependency></code></pre><p>创建LoginService类，提供login方法供Consumer端调用</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span> String userName<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"passWord"</span><span class="token punctuation">)</span> String passWord<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"leon"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> passWord<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"888"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"login success"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"login fail"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="改造Consumer服务"><a href="#改造Consumer服务" class="headerlink" title="改造Consumer服务"></a>改造Consumer服务</h1><p>为leon-consumer添加Feign相关依赖，然后调用Provider提供的接口<br>在leon-consumer项目的pom.xml中添加依赖：</p><pre class=" language-shell"><code class="language-shell"><dependency>    <groupId>org.springframework.cloud</groupId>    <artifactId>spring-cloud-starter-feign</artifactId></dependency></code></pre><p>创建一个接口：UserFeignClient，在里面定义好需要调用的接口方法（和Provider提供的方法一致），同时添加@FeignClient注解，并通过name指定需要调用的服务名称：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"leon-provider"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserFeignClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/login"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span> String userName<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"passWord"</span><span class="token punctuation">)</span> String passWord<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建Controller类调用Provider服务方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserFeignClient userFeignClient<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用户账号名和密码登录     *     * @param userName     * @param passWord     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span> String userName<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"passWord"</span><span class="token punctuation">)</span> String passWord<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userFeignClient<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> passWord<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在启动类上添加注解：@EnableFeignClients</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeonConsumerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>LeonConsumerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h1><p>分别运行leon-provider、leon-consumer，然后访问leon-consumer提供的login方法，分别传入正确、错误参数查看效果：<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190522160916.png" alt=""></p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190522160956.png" alt=""></p><p>说明服务已经能够通过注册中心找到对应的服务调用。</p><h1 id="服务集群"><a href="#服务集群" class="headerlink" title="服务集群"></a>服务集群</h1><p>复制leon-provider-1项目为leon-provider-2,然后打开项目，更改项目端口为8083</p><pre class=" language-shell"><code class="language-shell">server:  port: 8083spring:  application:    name: leon-provider  cloud:    consul:      host: localhost      port: 8500</code></pre><p>修改leon-provider-1、leon-provider-2的方法，添加识别信息：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span> String userName<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"passWord"</span><span class="token punctuation">)</span> String passWord<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"leon"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> passWord<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"888"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"leon-provider-1: login success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"leon-provider-1: login fail"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span> String userName<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"passWord"</span><span class="token punctuation">)</span> String passWord<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"leon"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> passWord<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"888"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"leon-provider-2: login success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"leon-provider-2: login fail"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>分别重启服务，可以看到新增了同名的服务<br><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190522162642.png" alt=""></p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190522162716.png" alt=""></p><p>然后刷新调用登录方法，可以看到会按照Spring Cloud体系中Ribbon的默认负载均衡策略轮询调用不同的服务。</p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190522162822.png" alt=""></p><p><img src="https://raw.githubusercontent.com/leonHua/PicServerForLeon/master/201905/20190522162842.png" alt=""></p><h1 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h1><h2 id="服务检测间隔"><a href="#服务检测间隔" class="headerlink" title="服务检测间隔"></a>服务检测间隔</h2><pre class=" language-shell"><code class="language-shell">  cloud:    consul:      host: localhost      port: 8500      discovery:        health-check-interval: 3s //3秒后如果服务停掉，检测界面会立即更新为非正常状态</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> Consul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Spring Cloud中使用Swagger自动构建API接口文档</title>
      <link href="/2018/09/25/zai-spring-cloud-zhong-shi-yong-swagger-zi-dong-gou-jian-api-jie-kou-wen-dang/"/>
      <url>/2018/09/25/zai-spring-cloud-zhong-shi-yong-swagger-zi-dong-gou-jian-api-jie-kou-wen-dang/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Swagger 是一个可以用来构建API服务文档的工具，并且API文档可以和代码服务实时更新，保持一致，提供了UI界面可以直接查看文档。同时还可以进行功能测试。</p><h1 id="在Spring-Boot项目中集成使用"><a href="#在Spring-Boot项目中集成使用" class="headerlink" title="在Spring Boot项目中集成使用"></a>在Spring Boot项目中集成使用</h1><h2 id="1-新建项目并添加相关依赖"><a href="#1-新建项目并添加相关依赖" class="headerlink" title="1.新建项目并添加相关依赖"></a>1.新建项目并添加相关依赖</h2><ul><li><p>Springfox-swagger2</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>springfox<span class="token operator">-</span>swagger2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.4</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre></li><li><p>Springfox-swagger2-ui</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>springfox<span class="token operator">-</span>swagger2<span class="token operator">-</span>ui<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.4</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><a id="more"></a><h2 id="2-添加配置类"><a href="#2-添加配置类" class="headerlink" title="2.添加配置类"></a>2.添加配置类</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableSwagger2</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// 当前包路径</span>             <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"cn.leon.leonswagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//构建api文档的详细信息函数</span>  <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//页面标题</span>              <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"Leon测试Swagger"</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//创建人</span>              <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"Leon"</span><span class="token punctuation">,</span> <span class="token string">"http://www.dujinghua.cn"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//版本号</span>              <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//描述</span>              <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"API 描述"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-为服务类添加注解"><a href="#3-为服务类添加注解" class="headerlink" title="3.为服务类添加注解"></a>3.为服务类添加注解</h2><p>为提供接口服务的Controller类添加注解：@Api</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span><span class="token string">"swagger测试相关api"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeonController</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="4-为方法添加注解"><a href="#4-为方法添加注解" class="headerlink" title="4.为方法添加注解"></a>4.为方法添加注解</h2><p>在上面创建的LeonController类中添加方法,并在方法上添加相关注解：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Get请求测试 */</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"根据id查询商品详情"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"查询某个商品的详细信息"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"商品id"</span><span class="token punctuation">,</span> paramType <span class="token operator">=</span> <span class="token string">"path"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span><span class="token string">"String"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户id"</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span> paramType <span class="token operator">=</span> <span class="token string">"path"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"1112"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiResponses</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@ApiResponse</span><span class="token punctuation">(</span>code <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"服务器内部错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@ApiResponse</span><span class="token punctuation">(</span>code <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"找不到请求路径"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"getGoods/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">GetGoods</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Leon-商品ID : "</span> <span class="token operator">+</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="5-访问文档"><a href="#5-访问文档" class="headerlink" title="5.访问文档"></a>5.访问文档</h2><p>运行项目，访问地址：<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a> 可以看到如下界面：<br><img src="https://upload-images.jianshu.io/upload_images/1978802-71a0cc8f29d4e223.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></p><p>点击leon-controller可以看到方法的描述：</p><p><img src="https://upload-images.jianshu.io/upload_images/1978802-57e99521adc20206.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"></p><h1 id="详细参数介绍"><a href="#详细参数介绍" class="headerlink" title="详细参数介绍"></a>详细参数介绍</h1><h3 id="EnableSwagger2-Configuration"><a href="#EnableSwagger2-Configuration" class="headerlink" title="@EnableSwagger2 @Configuration"></a>@EnableSwagger2 @Configuration</h3><p>配置类需要添加的注解，声明为Swagger</p><h3 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="@ApiOperation"></a>@ApiOperation</h3><p>指定接口方法的说明，如果方法不加此注解，说明默认为方法名称：<br><img src="https://upload-images.jianshu.io/upload_images/1978802-d81416b81c505652.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.png"></p><h3 id="ApiImplicitParams-ApiImplicitParam"><a href="#ApiImplicitParams-ApiImplicitParam" class="headerlink" title="@ApiImplicitParams @ApiImplicitParam"></a>@ApiImplicitParams @ApiImplicitParam</h3><p>接口详细描述的参数信息：<br><img src="https://upload-images.jianshu.io/upload_images/1978802-5b9d17cf503e99cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4.png"></p><p>其中 <strong>ApiImplicitParam</strong> 为具体的参数，里面的配置 <strong>paramType</strong> 需要注意：</p><p>paramType代表参数放在哪个地方</p><ul><li>header–&gt;请求参数的获取：@RequestHeader</li><li>query–&gt;请求参数的获取：@RequestParam</li><li>path（用于restful接口）–&gt;请求参数的获取：@PathVariable</li><li>body（不常用）</li><li>form（不常用）</li></ul><h3 id="ApiResponses"><a href="#ApiResponses" class="headerlink" title="@ApiResponses"></a>@ApiResponses</h3><p>接口返回信息描述：<br><img src="https://upload-images.jianshu.io/upload_images/1978802-03c457ebf3dc70c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5.png"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>除了用作静态接口文档，swagger还可以进行测试，直接看到接口调用的返回结果，在参数中输入数值，然后点击 <strong>try it out</strong> 按钮，就可以查看详细调用结果：<br><img src="https://upload-images.jianshu.io/upload_images/1978802-44a193b8458dea9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="6.png"></p><p>注：如果发现请求返回结果有问题，可以先查看请求的完整地址，是否是正确的格式</p><p>如果接口方法中不加任何描述，那么会按照方法的参数默认生成描述，并且参数都是必须的（requeired）,测试的不输入参数会提示报错：<br><img src="https://upload-images.jianshu.io/upload_images/1978802-861a1448010f299f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="7.png"></p><h1 id="返回json数据"><a href="#返回json数据" class="headerlink" title="返回json数据"></a>返回json数据</h1><p>目前接口返回一般都是json数据，在Swagger中，可以指定返回为json格式数据，在ApiOperation注解中添加produces：</p><pre class=" language-shell"><code class="language-shell"> @ApiOperation(value = "根据id查询商品详情", notes = "查询某个商品的详细信息",produces = "application/json")</code></pre><p>然后就可以看到：<br><img src="https://upload-images.jianshu.io/upload_images/1978802-4b374e34b11536b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="8.png"></p><p>在项目中添加JSON依赖：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>code<span class="token punctuation">.</span>gson<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>gson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.8</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>然后返回数据时返回json格式数据：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"getGoods/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">GetGoods</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String info <span class="token operator">=</span> <span class="token string">"Leon-商品ID : "</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    JsonObject jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jsonObject<span class="token punctuation">.</span><span class="token function">addProperty</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> jsonObject<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>重新在Swagger页面中测试，可以看到返回结果为json：<br><img src="https://upload-images.jianshu.io/upload_images/1978802-a7f7cdf575561b72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="9.png"></p><h1 id="在Spring-Cloud项目中集成使用"><a href="#在Spring-Cloud项目中集成使用" class="headerlink" title="在Spring Cloud项目中集成使用"></a>在Spring Cloud项目中集成使用</h1><p>在Spring Cloud中我们的服务都会注册在Eureka Server中，如下所示：<br><img src="https://upload-images.jianshu.io/upload_images/1978802-2c5e93e11acd0a99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="10.png"></p><p>此时当我们点击红框中的服务时，返回的是空，无法查看具体的服务信息，接下来在Spring Cloud集成Swagger。<br>首先为注册到Eureka Server上的服务添加配置：</p><pre class=" language-shell"><code class="language-shell">eureka:  client:    service-url:      defaultZone: http://root:123456@localhost:7776/eureka/  instance:    status-page-url: http://localhost:${server.port}/swagger-ui.html</code></pre><p>然后重启服务重新注册即可，然后在注册中心的界面，点击该服务就可以自动跳转到Swagger文档主页面</p><h1 id="替代产品"><a href="#替代产品" class="headerlink" title="替代产品"></a>替代产品</h1><p>除了使用Swagger提供项目API文档，还有其他一些不错的选择。Swagger的好处是可以根据代码变动随时更新内容并且可以测试，但是也有一些不太方便的地方：</p><ul><li>和代码耦合在一起，是代码看起来比较臃肿</li><li>如果代码没有写完，那么接口文档就无法完成</li><li>项目服务启动才能访问接口文档，如果是公司内网开发，离开环境就无法查看。或者后端开发停掉服务，前端开发就看不到文档了</li></ul><p>这里介绍几种其他的接口文档方案,具体选中哪种每个团队都会有不同的选择：</p><h2 id="Easy-Mock"><a href="#Easy-Mock" class="headerlink" title="Easy Mock"></a>Easy Mock</h2><p><a href="https://easy-mock.com/login" target="_blank" rel="noopener">https://easy-mock.com/login</a><br>是一个可视化，并且能快速生成模拟数据的服务。可以在线生成模拟接口，能够随机产生数据，也支持结合Swagger使用<br><img src="https://upload-images.jianshu.io/upload_images/1978802-4b12a99141a05130.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="11.png"></p><h2 id="YApi"><a href="#YApi" class="headerlink" title="YApi"></a>YApi</h2><p><a href="https://yapi.ymfe.org/" target="_blank" rel="noopener">https://yapi.ymfe.org/</a><br>可视化操作配置，同样非常方便<br><img src="https://upload-images.jianshu.io/upload_images/1978802-787f97f3b22a785d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="12.png"></p><h2 id="RAP"><a href="#RAP" class="headerlink" title="RAP"></a>RAP</h2><p><a href="http://rapapi.org/org/index.do" target="_blank" rel="noopener">http://rapapi.org/org/index.do</a><br>阿里妈妈前端团队出品的开源接口管理工具RAP第二代</p><p><img src="https://upload-images.jianshu.io/upload_images/1978802-f299d4c4dcd76994.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="13.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> API </tag>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker搭建ElasticSearch+Logstash+Kibana环境</title>
      <link href="/2018/07/09/shi-yong-docker-da-jian-elasticsearch-logstash-kibana-huan-jing/"/>
      <url>/2018/07/09/shi-yong-docker-da-jian-elasticsearch-logstash-kibana-huan-jing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在做 Spring Cloud 相关系列框架的搭建，在做到整合微服务跟踪-Sleuth后，项目添加了Sleuth后已经能够正常的输出跟踪信息日志，接下来要对整个日志进行分析处理，这里选取使用配合ELK来做，首先需要搭建整个ELK环境。</p></blockquote><h1 id="ELK介绍"><a href="#ELK介绍" class="headerlink" title="ELK介绍"></a>ELK介绍</h1><p>ELK （<a href="https://www.elastic.co/cn/products" target="_blank" rel="noopener" title="官网">官网</a>）其实是三个不同的内容，一般配合一起使用。分别是：</p><ul><li>ElasticSearch</li><li>Logstash</li><li>Kibana</li></ul><a id="more"></a><p>具体的介绍可以看官网的每个产品介绍</p><h1 id="Windows-环境搭建"><a href="#Windows-环境搭建" class="headerlink" title="Windows 环境搭建"></a>Windows 环境搭建</h1><p>可以参考：<a href="https://blog.csdn.net/pilihaotian/article/details/52452010" target="_blank" rel="noopener">https://blog.csdn.net/pilihaotian/article/details/52452010</a> ，基本上比较详细了，但是也可以看出windows安装比较繁琐，而且还会耗费机器本身资源，本文介绍使用Docker安装搭建。</p><h1 id="Docker-环境搭建"><a href="#Docker-环境搭建" class="headerlink" title="Docker 环境搭建"></a>Docker 环境搭建</h1><blockquote><p>ELK对应的有很多版本，本文均使用最新版本</p></blockquote><h2 id="安装-elasticsearch"><a href="#安装-elasticsearch" class="headerlink" title="安装 elasticsearch"></a>安装 elasticsearch</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><pre class=" language-shell"><code class="language-shell">    docker pull elasticsearch</code></pre><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><pre class=" language-shell"><code class="language-shell">docker run -d -p 9200:9200 --name leon_elasticsearch elasticsearch</code></pre><p>此时访问地址：<a href="http://192.168.9.151:9200/" target="_blank" rel="noopener"><u>http://192.168.9.151:9200/</u></a>，看到如下效果说明启动成功：<br><img src="https://upload-images.jianshu.io/upload_images/1978802-53aca0a1d7aa069a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.jpg"></p><h3 id="安装插件-elasticsearch-head"><a href="#安装插件-elasticsearch-head" class="headerlink" title="安装插件 elasticsearch-head"></a>安装插件 elasticsearch-head</h3><p>一般情况下，安装插件只需要执行命令：</p><pre class=" language-shell"><code class="language-shell">elasticsearch-plugin install mobz/elasticsearch-head</code></pre><p>那么我们现在进入到容器中对应的目录：/usr/share/elasticsearch/bin/，然后执行上述命令，但是发现报错：<br><img src="https://upload-images.jianshu.io/upload_images/1978802-fa278b237e466752.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>查阅相关文档得知以下信息：</p><blockquote><p>– for Elasticsearch 5.x:<br>  site plugins are not supported. Run elasticsearch-head as a standalone server</p></blockquote><p>也就是说5.X以上的版本，需要单独启动 elasticsearch-head 服务。<br>那么单独启动运行插件容器：</p><pre class=" language-shell"><code class="language-shell">docker run -d -p 9100:9100 --name leon_elasticsearch-head mobz/elasticsearch-head:5</code></pre><p>注意后面跟的版本5，一定要对应自己的版本。</p><p>容器启动后，访问地址：<a href="http://192.168.9.151:9100/" target="_blank" rel="noopener"><u>http://192.168.9.151:9100/</u></a></p><p><img src="https://upload-images.jianshu.io/upload_images/1978802-18ffce0d461ab776.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.jpg"></p><p>此时代表插件服务已经启动，但是点击连接，发现无法连接elasticsearch服务，需要修改配置文件，文件地址为容器中的：/usr/share/elasticsearch/config/elasticsearch.yml</p><p>我们进入容器，发现无法使用VI命令修改文件，这个时候可以安装VI工具然后修改文件，或者使用另外一种粗暴的方法，在外面修改然后覆盖文件。这里因为安装VI总是出错，所以使用第二种方式。</p><p>首先将容器中的配置文件导出来：</p><pre class=" language-shell"><code class="language-shell">docker cp leon_elasticsearch:/usr/share/elasticsearch/config/elasticsearch.yml /home/px2/elasticsearch.yml</code></pre><p>在文件中添加以下内容：</p><pre class=" language-shell"><code class="language-shell">http.cors.enabled: truehttp.cors.allow-origin: "*"http.cors.allow-headers: Authorization</code></pre><p>然后在替换容器中的文件：</p><pre class=" language-shell"><code class="language-shell">docker cp /home/px2/elasticsearch.yml leon_elasticsearch:/usr/share/elasticsearch/config/elasticsearch.yml</code></pre><p>重启容器，然后重新访问：<a href="http://localhost:9100/" target="_blank" rel="noopener">http://localhost:9100/</a> 就可以连接上了（此时还没有数据）</p><p><img src="https://upload-images.jianshu.io/upload_images/1978802-43d8555837a5f1e5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.jpg"></p><blockquote><p>注意：如果还是不能连接，可以访问地址来连接：<a href="http://localhost:9100/?auth_user=elastic&amp;auth_password=changeme" target="_blank" rel="noopener">http://localhost:9100/?auth_user=elastic&amp;auth_password=changeme</a></p></blockquote><h2 id="安装logstash"><a href="#安装logstash" class="headerlink" title="安装logstash"></a>安装logstash</h2><p>这里有个比较坑的问题，使用Docker官方Hub里的镜像 docker pull logstash 启动的容器总是会自动停掉，无法运行，后来选择使用官网中的镜像地址：</p><pre class=" language-shell"><code class="language-shell">docker run --name leon_logstash docker.elastic.co/logstash/logstash:6.2.4</code></pre><p>修改配置文件,进入容器：</p><pre class=" language-shell"><code class="language-shell">docker exec -it leon_logstash /bin/bash</code></pre><p>进入目录cd config<br>打开并修改配置文件 vi logstash.yml:</p><pre class=" language-shell"><code class="language-shell">http.host: "0.0.0.0"xpack.monitoring.elasticsearch.url: http://192.168.9.151:9200xpack.monitoring.elasticsearch.username: elasticxpack.monitoring.elasticsearch.password: changeme</code></pre><h2 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h2><h3 id="拉取镜像-1"><a href="#拉取镜像-1" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><pre class=" language-shell"><code class="language-shell">docker pull kibana</code></pre><h3 id="启动容器-1"><a href="#启动容器-1" class="headerlink" title="启动容器"></a>启动容器</h3><pre class=" language-shell"><code class="language-shell">docker run --name leon_kibana -p 5601:5601 -d -e ELASTICSEARCH_URL=http://192.168.9.151:9200 kibana</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>访问地址：<a href="http://192.168.9.151:5601" target="_blank" rel="noopener">http://192.168.9.151:5601</a> ，看到如下效果</p><p><img src="https://upload-images.jianshu.io/upload_images/1978802-ba52414cabe512ba.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4.jpg"></p><p>此时报错中间红色部分，无法进行创建，找到<a href="https://discuss.elastic.co/t/kibana-unable-to-fetch-mapping/50646" target="_blank" rel="noopener" title="资料">资料</a>得知：</p><p><img src="https://upload-images.jianshu.io/upload_images/1978802-85f4ab448dfd4a83.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5.jpg"></p><p>看官网的解释说这是因为初次设置的时候logstash没有加载到数据导致的。所以先要保证logstash能够加载到数据。</p><h3 id="配置数据"><a href="#配置数据" class="headerlink" title="配置数据"></a>配置数据</h3><p>进入到容器中：</p><pre class=" language-shell"><code class="language-shell">docker exec -it leon_logstash /bin/bash</code></pre><p>然后进入如下目录：<br>cd pipeline/<br>打开配置文件：vi logstash.conf</p><p>修改内容如下：</p><pre class=" language-shell"><code class="language-shell">input {        file {            codec=> json                path => "/usr/local/*.json"        }}filter {  #定义数据的格式  grok {    match => { "message" => "%{DATA:timestamp}\|%{IP:serverIp}\|%{IP:clientIp}\|%{DATA:logSource}\|%{DATA:userId}\|%{DATA:reqUrl}\|%{DATA:reqUri}\|%{DATA:refer}\|%{DATA:device}\|%{DATA:textDuring}\|%{DATA:duringTime:int}\|\|"}  }}output {   elasticsearch{     hosts=> "http://192.168.9.151:9200"   }} </code></pre><p>其中指定了输出地址：elasticsearch的地址，而且还指定了内容输入地址：/usr/local/*.json，需要在usr/local下有json格式的数据，接下来将项目生成的json格式的日志文件上传到该目录。</p><pre class=" language-shell"><code class="language-shell">docker cp /home/px2/logs/shop-user-consumer.json leon_logstash:/usr/local/shop-user-consumer.jsondocker cp /home/px2/logs/shop-user-provider.json leon_logstash:/usr/local/shop-user-provider.json</code></pre><p>然后重启logstash容器，在重新访问页面，可以看到可以进行create了。</p><p><img src="https://upload-images.jianshu.io/upload_images/1978802-609bcfd58e95e441.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="6.jpg"></p><p>点击create创建成功后，点击Discovery,选择时间为一年内，可以看到之前的数据：</p><p><img src="https://upload-images.jianshu.io/upload_images/1978802-cf7834ce45468030.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="7.jpg"></p><p>并且访问9100地址也能加载出节点信息了：</p><p><img src="https://upload-images.jianshu.io/upload_images/1978802-99d9441978dda263.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="8.png"></p><h2 id="至此，整个ELK环境就搭建起来了。"><a href="#至此，整个ELK环境就搭建起来了。" class="headerlink" title="至此，整个ELK环境就搭建起来了。"></a>至此，整个ELK环境就搭建起来了。</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> ElasticSearch </tag>
            
            <tag> Logstash </tag>
            
            <tag> Kibana </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Doker网络设置相关</title>
      <link href="/2018/03/20/doker-wang-luo-she-zhi-xiang-guan/"/>
      <url>/2018/03/20/doker-wang-luo-she-zhi-xiang-guan/</url>
      
        <content type="html"><![CDATA[<h1 id="查看容器的IP地址"><a href="#查看容器的IP地址" class="headerlink" title="查看容器的IP地址"></a>查看容器的IP地址</h1><h2 id="查看单个容器的详细完整信息"><a href="#查看单个容器的详细完整信息" class="headerlink" title="查看单个容器的详细完整信息"></a>查看单个容器的详细完整信息</h2><pre class=" language-java"><code class="language-java">docker inspect <span class="token operator">--</span>format <span class="token string">'{{ .NetworkSettings.IPAddress }}'</span> <span class="token operator">&lt;</span>container<span class="token operator">-</span>ID<span class="token operator">></span> </code></pre><p>或者</p><pre class=" language-java"><code class="language-java">docker inspect <span class="token operator">&lt;</span>container id<span class="token operator">></span> </code></pre><p>或者</p><pre class=" language-java"><code class="language-java">docker inspect <span class="token operator">-</span>f <span class="token string">'{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'</span> container_name_or_id</code></pre><h2 id="简洁模式—查看所有的容器的IP"><a href="#简洁模式—查看所有的容器的IP" class="headerlink" title="简洁模式—查看所有的容器的IP"></a>简洁模式—查看所有的容器的IP</h2><pre class=" language-java"><code class="language-java">docker inspect <span class="token operator">--</span>format<span class="token operator">=</span><span class="token string">'{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'</span> $<span class="token punctuation">(</span>docker ps <span class="token operator">-</span>aq<span class="token punctuation">)</span></code></pre><h1 id="为什么需要给容器设置固定IP"><a href="#为什么需要给容器设置固定IP" class="headerlink" title="为什么需要给容器设置固定IP"></a>为什么需要给容器设置固定IP</h1><p>在默认的的桥接模式下，会给每个容器随机分配一个没有使用的IP，一般会按照顺序创建，比如使用bridge模式默认的IP和网段为：172.17.0.1。那么此时创建运行一个新的容器，这个容器的IP会是172.17.0.2，继续创建容器，IP依次类推。这个时候容器间的IP都是在同一网段，是可以互相通信的。<br>但是这种处理方式，如果容器停止重新启动，那么IP会重新分配，这个时候如果想要和之前一样的IP，那么就必须要和之前的启动顺序完全一致。在开发中如果使用容器作为稳定服务，那么肯定需要IP是固定的，而且设置IP的时候可以设置网段，也就是说可以合理分配容器之间是否可以通信，提前做好IP规划，这样保证了容器的沙箱特性，如果不是需要通信的，就设置为不同的网段即可。</p><a id="more"></a><h1 id="如何给容器设定固定IP"><a href="#如何给容器设定固定IP" class="headerlink" title="如何给容器设定固定IP"></a>如何给容器设定固定IP</h1><p>注意：默认bridge模式下无法直接给容器设定固定IP，此时需要先创建自定义网络。<br>具体的步骤为：</p><h2 id="1-创建自定义网络，并指定网段：172-18-0-0-16"><a href="#1-创建自定义网络，并指定网段：172-18-0-0-16" class="headerlink" title="1.创建自定义网络，并指定网段：172.18.0.0/16"></a>1.创建自定义网络，并指定网段：172.18.0.0/16</h2><p>使用命令</p><pre class=" language-java"><code class="language-java">docker network create <span class="token operator">--</span>subnet<span class="token operator">=</span><span class="token number">172.18</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">/</span><span class="token number">16</span> mynetwork</code></pre><p>创建后可以查看，查看命令：</p><pre class=" language-java"><code class="language-java">docker network ls</code></pre><h2 id="2-创建Docker容器-并指定IP"><a href="#2-创建Docker容器-并指定IP" class="headerlink" title="2.创建Docker容器,并指定IP"></a>2.创建Docker容器,并指定IP</h2><p>命令如下：</p><pre class=" language-java"><code class="language-java">docker run <span class="token operator">-</span>it <span class="token operator">-</span>d <span class="token operator">--</span>net mynetwork <span class="token operator">--</span>ip <span class="token number">172.18</span><span class="token punctuation">.</span><span class="token number">0.8</span> <span class="token operator">--</span>name mytomcat tomcat</code></pre><p>然后就会给容器有默认固定IP，使用ifconfig也可以查看。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 固定IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker快速入手使用</title>
      <link href="/2018/03/20/doker-kuai-su-ru-shou-shi-yong/"/>
      <url>/2018/03/20/doker-kuai-su-ru-shou-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="下载安装Docker"><a href="#下载安装Docker" class="headerlink" title="下载安装Docker"></a>下载安装Docker</h1><p>在Ubuntn中，到终端窗口中（切换为root用户）：<br>执行命令如下，查看内核版本，必须3.0以上支持Docker.</p><pre class=" language-java"><code class="language-java">uname <span class="token operator">-</span> r</code></pre><p>执行命令如下，进行更新。</p><pre class=" language-java"><code class="language-java">apt<span class="token operator">-</span>get update</code></pre><p>执行如下命令，进行安装本地存在的Docker.  Ubuntn在16新版本后默认包含有Dokcer，其它版本不确定有没有。如果没有，需要从网络下载然后安装。<br>安装本地的命令：</p><pre class=" language-java"><code class="language-java">apt<span class="token operator">-</span>get install <span class="token operator">-</span>y docker<span class="token punctuation">.</span>io</code></pre><a id="more"></a><p>从网络下载最新版本进行安装，命令如下（测试有可能不成功，在16.04.3版本Ubuntn没有成功）</p><pre class=" language-java"><code class="language-java">curl <span class="token operator">-</span>s https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>get<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>com<span class="token operator">|</span>sh</code></pre><p>或者命令：</p><pre class=" language-java"><code class="language-java">wget <span class="token operator">-</span>qo<span class="token operator">-</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>get<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>com<span class="token operator">/</span> <span class="token operator">|</span> sh</code></pre><h1 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h1><pre class=" language-java"><code class="language-java">docker search 镜像名称（tomcat）</code></pre><h1 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h1><pre class=" language-java"><code class="language-java">docker pull <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NAME<span class="token punctuation">[</span><span class="token operator">:</span>TAG<span class="token operator">|</span><span class="token annotation punctuation">@DIGEST</span><span class="token punctuation">]</span>  具体：docker pull tomcat</code></pre><h1 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h1><pre class=" language-java"><code class="language-java">docker rmi 镜像Id或镜像名称</code></pre><h1 id="启动镜像生成容器"><a href="#启动镜像生成容器" class="headerlink" title="启动镜像生成容器"></a>启动镜像生成容器</h1><pre class=" language-java"><code class="language-java">docker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">8888</span><span class="token operator">:</span><span class="token number">8080</span> <span class="token operator">--</span>name tomcat<span class="token operator">-</span>test tomcat <span class="token comment" spellcheck="true">//-d后端运行 ； -p端口映射； --name 起容器名字</span></code></pre><h1 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h1><pre class=" language-java"><code class="language-java">查询正在运行的容器：docker ps<span class="token operator">|</span>grep 容器关键词查询全部<span class="token punctuation">(</span>包括已停止<span class="token punctuation">)</span>的容器：docker ps <span class="token operator">-</span>a<span class="token operator">|</span>grep 容器关键词</code></pre><h1 id="进入容器、退出容器"><a href="#进入容器、退出容器" class="headerlink" title="进入容器、退出容器"></a>进入容器、退出容器</h1><pre class=" language-java"><code class="language-java">docker exec <span class="token operator">-</span>it containerId<span class="token operator">/</span>containerName <span class="token operator">/</span>bin<span class="token operator">/</span>bash</code></pre><pre class=" language-java"><code class="language-java">退出：exit</code></pre><h1 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h1><pre class=" language-java"><code class="language-java">docker stop containerId<span class="token operator">/</span>containerName</code></pre><h1 id="重新启动容器"><a href="#重新启动容器" class="headerlink" title="重新启动容器"></a>重新启动容器</h1><pre class=" language-java"><code class="language-java">docker start containerId<span class="token operator">/</span>containerName</code></pre><h1 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h1><pre class=" language-java"><code class="language-java">docker rm containerId<span class="token operator">/</span>containerName</code></pre><h1 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h1><pre class=" language-java"><code class="language-java">复制宿主机文件到容器：docker cp 宿主机目录及文件 容器名称<span class="token operator">:</span>容器目录举例子：docker cp index<span class="token punctuation">.</span>html tomcat<span class="token operator">-</span>leon<span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>tomcat<span class="token operator">/</span>webapps<span class="token operator">/</span>ROOT</code></pre><h1 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h1><pre class=" language-java"><code class="language-java">apt<span class="token operator">-</span>get purge docker<span class="token punctuation">.</span>io</code></pre><p>或者使用命令：</p><pre class=" language-java"><code class="language-java">apt<span class="token operator">-</span>get remove docker<span class="token punctuation">.</span>io</code></pre><p><code>注意：purge后面跟的一定是自己安装docker时候的名字，不然会报docker没有安装无法卸载的提示</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 安装 </tag>
            
            <tag> 容器 </tag>
            
            <tag> 镜像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gson库和GsonFormat解析数据问题总结</title>
      <link href="/2017/10/19/gson-ku-he-gsonformat-jie-xi-shu-ju-wen-ti-zong-jie/"/>
      <url>/2017/10/19/gson-ku-he-gsonformat-jie-xi-shu-ju-wen-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<hr><p>在开发中解析 json 库大多会用到 Gson 库，大多数时候无往而不利，但是因为数据的复杂性不能确定，总还是会遇到解析失败的情况。现在将遇到的解析错误总结，以便以后分析问题</p><h2 id="GsonFormat-插件解析JSON失败-数据空"><a href="#GsonFormat-插件解析JSON失败-数据空" class="headerlink" title="GsonFormat 插件解析JSON失败 -数据空"></a>GsonFormat 插件解析JSON失败 -数据空</h2><p> <strong>org.json.JSONException: JSONArray[0] not found.</strong><br> 如图：</p><p><img src="http://upload-images.jianshu.io/upload_images/1978802-c6c043dff768adb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/1978802-6ee57937ddabc74a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br> GsonFormat 插件不能解析为空的数据，此时只要把报错的空数组填上对应格式的假数据即可，Gson 库正常情况下为空也是可以解析的，此时只是为了能够生成实体类<br> <a id="more"></a></p><h2 id="GsonFormat-插件解析JSON失败-变量名为纯数字"><a href="#GsonFormat-插件解析JSON失败-变量名为纯数字" class="headerlink" title="GsonFormat 插件解析JSON失败 - 变量名为纯数字"></a>GsonFormat 插件解析JSON失败 - 变量名为纯数字</h2><p> 数据中的变量名为纯数字，GsonFormat插件不会报错，但是无法正常生成类。此时可以改变一下对应的命名规则，如图：</p><p><img src="http://upload-images.jianshu.io/upload_images/1978802-a1172d855db08dc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/1978802-2cd629f6482862d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="Gson-库解析数据为null"><a href="#Gson-库解析数据为null" class="headerlink" title="Gson 库解析数据为null"></a>Gson 库解析数据为null</h2><p>如图:</p><p><img src="http://upload-images.jianshu.io/upload_images/1978802-b821e4d12d331c83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>如果数据是网络地址类型，解析的时候可能无法正常解析，即使有数据也解析为null。此时可以将数据进行序列化，将无法正常解析的数据添加注解： @SerializedName</p><p>如图：</p><p><img src="http://upload-images.jianshu.io/upload_images/1978802-60b167a16385a2a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>~~有问题在继续更新</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gson </tag>
            
            <tag> GsonFormat </tag>
            
            <tag> json解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非常有用的资源合集-开发设计再也不愁啦</title>
      <link href="/2017/08/15/fei-chang-you-yong-de-zi-yuan-he-ji-kai-fa-she-ji-zai-ye-bu-chou-la/"/>
      <url>/2017/08/15/fei-chang-you-yong-de-zi-yuan-he-ji-kai-fa-she-ji-zai-ye-bu-chou-la/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇文章已授权微信公众号code小生发布<br>转载请注明出处：<a href="http://www.jianshu.com/p/1c3ff262d224" target="_blank" rel="noopener">http://www.jianshu.com/p/1c3ff262d224</a></p></blockquote><hr><p>个人整理的好用的资源合集，包含开发、设计、图标、色彩、接口、流程设计等一大波资源地址，觉得好用点个喜欢吧~</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="后端云"><a href="#后端云" class="headerlink" title="后端云"></a>后端云</h3><p><strong>P.S.</strong>   如果没有后端开发能力木有关系，这些平台提供了后端服务，集成SDK后，然后调用相关的接口可把数据保存到云端，当然也可以查询。对个人开发者来说满满的福利…</p><p><a href="https://www.bmob.cn/" target="_blank" rel="noopener">Bmob</a><br><a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a><br><a href="https://maxleap.cn/s/web/zh_cn/index.html" target="_blank" rel="noopener">maxleap</a></p><h3 id="测试平台"><a href="#测试平台" class="headerlink" title="测试平台"></a>测试平台</h3><a id="more"></a><p><strong>P.S.</strong>   应用想要测试众多手机型号肿么办？相关云测平台也很多，选择一个合适的基本上大多数机型都可以测试到了，之前用的腾讯免费的机型还不少，现在几乎木有了…</p><p><a href="http://utest.qq.com/" target="_blank" rel="noopener">腾讯优测</a><br><a href="http://mtc.baidu.com/" target="_blank" rel="noopener">百度MTC</a><br><a href="http://www.testin.cn/" target="_blank" rel="noopener">Testin</a><br><a href="http://cloudtest.komect.com/#/" target="_blank" rel="noopener">贯众云测试</a><br><a href="http://mqc.aliyun.com/" target="_blank" rel="noopener">阿里MQC</a></p><h3 id="bug管理"><a href="#bug管理" class="headerlink" title="bug管理"></a>bug管理</h3><p><strong>P.S.</strong>   不管是个人还是团队，很多时候都想要完整的记录和跟踪bug，那么这些平台总有一个满足你的，大多数还都免费哦…</p><p><a href="https://bug.pgyer.com/" target="_blank" rel="noopener">蒲公英Bug管理云</a><br><a href="https://www.bugdone.cn/home/" target="_blank" rel="noopener">BugDone</a><br><a href="http://www.delbug.cn/" target="_blank" rel="noopener">delbug</a><br><a href="http://www.yugusoft.com/" target="_blank" rel="noopener">鱼骨</a></p><h2 id="综合API平台"><a href="#综合API平台" class="headerlink" title="综合API平台"></a>综合API平台</h2><p><strong>P.S.</strong>   相对综合全面的一个接口服务站点，早期免费很多，现在感觉也逐渐在像付费发展，想要免费的还是要搜搜搜！！！而且一般会有使用限制，不过如果是试用就无所谓啦~</p><p><a href="https://wx.jcloud.com/" target="_blank" rel="noopener">京东万象</a><br><a href="http://apistore.baidu.com/" target="_blank" rel="noopener">百度apistore</a><br><a href="https://www.juhe.cn/" target="_blank" rel="noopener">聚合数据</a><br><a href="http://www.haoservice.com/" target="_blank" rel="noopener">HaoService</a><br><a href="http://www.avatardata.cn/Docs" target="_blank" rel="noopener">阿凡达数据</a></p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><h3 id="原型设计"><a href="#原型设计" class="headerlink" title="原型设计"></a>原型设计</h3><p><strong>P.S.</strong>   个人比较喜欢墨刀，用的也比较早。目前新版本升级后收费机制也变啦，限制了应用数量~</p><p><a href="https://www.axure.com.cn/" target="_blank" rel="noopener">Axture</a><br><a href="https://modao.cc/" target="_blank" rel="noopener">墨刀</a></p><h3 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h3><p><strong>P.S.</strong>   学会了更多设计，是不是就可以和设计妹纸深入沟通了？</p><p><a href="http://www.getmarkman.com/" target="_blank" rel="noopener">马克鳗</a><br><a href="http://www.fancynode.com.cn/pxcook" target="_blank" rel="noopener">PxCook 像素大厨</a><br><a href="http://www.biaonimeia.com/" target="_blank" rel="noopener">标你妹</a></p><h3 id="设计规范"><a href="#设计规范" class="headerlink" title="设计规范"></a>设计规范</h3><p><a href="https://developer.android.com/design/index.html" target="_blank" rel="noopener">Android设计</a><br><a href="https://developer.apple.com/design/" target="_blank" rel="noopener">Apple设计</a><br><a href="https://material.io/devices/" target="_blank" rel="noopener">安卓尺寸</a><br><a href="https://material.io/" target="_blank" rel="noopener">Material设计</a><br><a href="http://screensiz.es/phone" target="_blank" rel="noopener">移动屏幕尺寸规范</a></p><h2 id="UI资源"><a href="#UI资源" class="headerlink" title="UI资源"></a>UI资源</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><strong>P.S.</strong>   就算是一个背景图也要高清有格调！</p><p><a href="https://huabantp://www.biaonimeia.com/" target="_blank" rel="noopener">花瓣</a><br><a href="https://www.hdwallpapers.net/" target="_blank" rel="noopener">HDwallpapers</a><br><a href="http://cn.bing.com/" target="_blank" rel="noopener">BingGallery</a><br><a href="https://pixabay.com/" target="_blank" rel="noopener">Pixabay</a><br><a href="https://www.flickr.com/explore" target="_blank" rel="noopener">Flickr</a><br><a href="https://www.splitshire.com/" target="_blank" rel="noopener">Splitshire</a><br><a href="https://www.foodiesfeed.com/" target="_blank" rel="noopener">Foodiesfeed</a></p><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><p><strong>P.S.</strong>  有第一个就够了，更何况还有这么多！<br><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">Iconfont</a><br><a href="http://www.easyicon.net/" target="_blank" rel="noopener">easyicon</a><br><a href="https://icomoon.io/app/#/select" target="_blank" rel="noopener">IcoMoon</a><br><a href="https://simpleicons.org/" target="_blank" rel="noopener">simpleicons</a><br><a href="https://github.com/theDazzler/droidicon">droidicon</a><br><a href="https://github.com/mikepenz/Android-Iconics">Android-Iconics</a><br><a href="https://github.com/MarsVard/IonIconView">IonIconView</a></p><h3 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h3><p><strong>P.S.</strong>  从此我也能做出漂亮的界面，大师帮你配色~~ </p><p><a href="https://www.materialpalette.com/blue/purple" target="_blank" rel="noopener">MD调色器</a><br><a href="http://tool.c7sky.com/webcolor/" target="_blank" rel="noopener">配色表</a><br><a href="http://www.colorfavs.com/" target="_blank" rel="noopener">上传并匹配提取图片风格的颜色</a><br><a href="https://webgradients.com/" target="_blank" rel="noopener">漂亮渐变色模板</a><br><a href="http://www.colorhunt.co/" target="_blank" rel="noopener">Colorhunt</a><br><a href="http://www.atool.org/colorpicker.php" target="_blank" rel="noopener">colorpicker</a></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><strong>P.S.</strong> 在线流程图，再也不用费劲装Visio了，其实，还可以画UML、原型、思维导图等等…</p><p><a href="https://www.processon.com/" target="_blank" rel="noopener">Processon</a></p><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><strong>P.S.</strong> 电脑中常备前两个软件，后两个可以在线使用。百度脑图可以导出Xmind格式…</p><p><a href="http://www.xmind.net/" target="_blank" rel="noopener">XMind</a><br><a href="http://www.mindmanager.cc/" target="_blank" rel="noopener">MindManager</a><br><a href="http://naotu.baidu.com/" target="_blank" rel="noopener">百度脑图</a><br><a href="https://mubu.com/" target="_blank" rel="noopener">幕布</a></p><h2 id="协作"><a href="#协作" class="headerlink" title="协作"></a>协作</h2><p><strong>P.S.</strong>  多人协作文档或者其他，其实还有github…</p><p><a href="https://shimo.im/" target="_blank" rel="noopener">石墨文档</a><br><a href="https://www.google.com/intl/zh-CN/docs/about/" target="_blank" rel="noopener">Google文档</a><br><a href="http://www.onenote.com/" target="_blank" rel="noopener">Onenote</a><br><a href="https://www.teambition.com/" target="_blank" rel="noopener">teambition</a><br><a href="https://worktile.com/" target="_blank" rel="noopener">Worktile</a></p><h2 id="产品资讯"><a href="#产品资讯" class="headerlink" title="产品资讯"></a>产品资讯</h2><p><strong>P.S.</strong>  有时候就是不想撸代码，那就看看IT产品相关资讯…</p><p><a href="https://sspai.com/" target="_blank" rel="noopener">少数派</a><br><a href="http://www.woshipm.com/" target="_blank" rel="noopener">人人都是产品经理</a><br><a href="http://36kr.com/" target="_blank" rel="noopener">36氪</a><br><a href="http://www.geekpark.net/" target="_blank" rel="noopener">极客公园</a><br><a href="http://www.guokr.comtp://www.geekpark.net/" target="_blank" rel="noopener">果壳</a></p><h2 id="博客内容"><a href="#博客内容" class="headerlink" title="博客内容"></a>博客内容</h2><p>萝卜青菜，各有所爱，选择自己稀罕的…</p><p><a href="https://wordpress.orgmtp://www.geekpark.net/" target="_blank" rel="noopener">Wordpress</a><br><a href="http://typecho.org/" target="_blank" rel="noopener">Typecho</a><br><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a><br><a href="https://pages.github.com/" target="_blank" rel="noopener">Gitpage</a></p><blockquote><p>不定期更新哦，欢迎访问我的 <a href="http://dujinghua.cn/" target="_blank" rel="noopener">博客</a> </p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 干货 </tag>
            
            <tag> 资源 </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一款精致的干货客户端</title>
      <link href="/2017/07/05/yi-kuan-jing-zhi-de-gan-huo-ke-hu-duan/"/>
      <url>/2017/07/05/yi-kuan-jing-zhi-de-gan-huo-ke-hu-duan/</url>
      
        <content type="html"><![CDATA[<p><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LGank/ic_launcher.png" alt=""></p><hr><h1 id="LGank是一款精致的干货客户端"><a href="#LGank是一款精致的干货客户端" class="headerlink" title="LGank是一款精致的干货客户端"></a>LGank是一款精致的干货客户端</h1><p><a href="https://fir.im/lgank" target="_blank" rel="noopener">下载使用：https://fir.im/lgank</a><br><a href="https://github.com/leonHua/LGank">GitHub地址</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>整体设计遵循 Material Design 规范，实现了多种应用常见的效果。包括不局限于：</p><ul><li>沉浸式状态栏</li><li>有趣的加载动画</li><li>滑动关闭Activity</li><li>多主题切换</li><li>瀑布流、线性、网格布局动态切换</li><li>动态加载流式布局</li><li>下拉刷新、上拉加载更多</li><li>显示动态GIF图、高斯模糊背景</li><li>侧滑菜单</li><li>Realm数据库使用</li><li>ViewPage嵌套滑动</li></ul><a id="more"></a><p>提供常见的干货资源获取，支持分类查看，同时提供搜索功能，保留搜索记录。如果仅仅是这样，那么它仅仅又是一个好看的客户端~~</p><p><strong>But, LGank 同时提供资讯阅读模块，可以查看IT移动互联最新资讯。而且提供干货收藏功能，再也不用担心看过的东东找不到啦<del>~</del></strong> </p><p><strong>福利：在设置界面可以将头像、昵称、我的博客和Follow Me(GitHub、微博等等)设置为你自己的地址，完全将其打造成属于自己的专属客户端。</strong></p><p>更多等你发现……..</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><p>架构：MVC+ViewPager+Fragment<br>网络：RxJava+Retorfit+OkHttp3<br>数据库：Realm<br>图片加载：Glide<br>滑动关闭Activity：swipebackhelper<br>多主题换肤：skin-support<br>图片选择：boxing<br>快速实现设置界面：<a href="https://github.com/leonHua/LSettingView">lsettingviewlibrary</a><br>………（更多请查看项目依赖文件）</p><p>@感谢以上开源作者无私贡献，感谢 <a href="http://gank.io/" target="_blank" rel="noopener">干货集中营</a> 提供数据</p><h2 id="项目效果图"><a href="#项目效果图" class="headerlink" title="项目效果图"></a>项目效果图</h2><hr><p><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LGank/lgank%20%281%29.png?imageView2/0/w/500/h/1200/q/100" alt=""><br><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LGank/lgank%20%282%29.png?imageView2/0/w/500/h/1200/q/100" alt=""><br><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LGank/lgank%20%283%29.png?imageView2/0/w/500/h/1200/q/100" alt=""> </p><hr><p><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LGank/lgank%20%284%29.png?imageView2/0/w/500/h/1200/q/100" alt=""><br><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LGank/lgank%20%285%29.png?imageView2/0/w/500/h/1200/q/100" alt=""><br><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LGank/lgank%20%286%29.png?imageView2/0/w/500/h/1200/q/100" alt=""> </p><hr><p><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LGank/lgank%20%287%29.png?imageView2/0/w/500/h/1200/q/100" alt=""><br><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LGank/lgank%20%288%29.png?imageView2/0/w/500/h/1200/q/100" alt=""><br><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LGank/lgank%20%289%29.png?imageView2/0/w/500/h/1200/q/100" alt=""></p><hr><p><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LGank/lgank%20%2810%29.png?imageView2/0/w/500/h/1200/q/100" alt=""><br><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LGank/lgank%20%2811%29.png?imageView2/0/w/500/h/1200/q/100" alt=""><br><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LGank/lgank%20%2812%29.png?imageView2/0/w/500/h/1200/q/100" alt=""> </p><hr><p><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LGank/lgank%20%2813%29.png?imageView2/0/w/500/h/1200/q/100" alt=""><br><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LGank/lgank%20%2814%29.png?imageView2/0/w/500/h/1200/q/100" alt=""><br><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LGank/lgank%20%2815%29.png?imageView2/0/w/500/h/1200/q/100" alt=""> </p><h2 id="打赏鼓励"><a href="#打赏鼓励" class="headerlink" title="打赏鼓励"></a>打赏鼓励</h2><p>资讯获取有限制（次数和频率），如发现资讯无法读取，可能是免费次数超限了<del>~</del> (需要更换Constant类里的APIKEY-天行数据)</p><p>如果你觉得我的项目对你有帮助，请扫描下方的二维码随意打赏，您的支持是我最好的动力! </p><p>不想打赏，那就随手来个star吧！</p><p><img src="http://o9w936rbz.bkt.clouddn.com/me/zhifubao.png" alt="Alipay支付宝"> ……………………. <img src="http://o9w936rbz.bkt.clouddn.com/me/weixin.png" alt="WeChat微信"></p><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p><a href="http://www.jianshu.com/u/984760f279b0" target="_blank" rel="noopener">我的简书</a></p><p><a href="http://dujinghua.cn/" target="_blank" rel="noopener">我的博客</a></p><p><a href="https://github.com/leonHua">我的GitHub</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 干货 </tag>
            
            <tag> RxJava </tag>
            
            <tag> Retrofit </tag>
            
            <tag> Realm </tag>
            
            <tag> Glide </tag>
            
            <tag> 多主题 </tag>
            
            <tag> Recyclerview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LFilePicker-文件选择利器</title>
      <link href="/2017/04/06/lfilepicker-wen-jian-xuan-ze-li-qi/"/>
      <url>/2017/04/06/lfilepicker-wen-jian-xuan-ze-li-qi/</url>
      
        <content type="html"><![CDATA[<p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201704/1/head.jpg" alt="LFilePicker"></p><blockquote><p>版本已更新至1.7.0，最新功能请查看传送门：<br><a href="https://github.com/leonHua/LFilePicker">https://github.com/leonHua/LFilePicker</a></p></blockquote><blockquote><p>在 Android 开发中如果需要选择某个文件，可以直接调取系统的文件管理器进行选择，但是无法保证各个厂商的手机界面一致，而且解析Uri 还比较繁琐，如果还需要多选呢？需要文件类型过滤呢？老板说界面丑呢？</p></blockquote><p>那么福利来了，你可以使用LFilePicker，它都支持什么呢？</p><ul><li>还算漂亮的界面</li><li>各种手机一致的体验</li><li>多种界面风格</li><li>自定义标题文字和颜色</li><li>文件多选或者单选</li><li>文件类型过滤</li><li>Fragment启动</li><li>国际化（中英文切换）</li><li>最大数量限制</li><li>全选或者全部取消</li><li>文件夹路径选择</li></ul><p>在哪里能找到它呢？Bio Bio Bio</p><a id="more"></a><blockquote><p>传送门：<a href="https://github.com/leonHua/LFilePicker">https://github.com/leonHua/LFilePicker</a></p></blockquote><p>心急的人可以直接根据说明文档进行使用了，任性的人跟着我继续走<del>~</del><br>先看看界面，万一丑的不行呢？</p><center>![默认界面][1]</center><p>好了还算可以把，和经典的Windows风格类似，先用用看吧。怎么用呢?</p><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h3><pre class=" language-java"><code class="language-java">compile <span class="token string">'com.leon:lfilepickerlibrary:1.2.0'</span></code></pre><p>【P.S.】 话说为了能够方便的依赖使用可是操碎了心，将项目库开源到JCenter使用的过程中趟了很多坑，如果感兴趣，可以查看文章：<a href="http://www.jianshu.com/p/b5d3462407fc" target="_blank" rel="noopener">新版Bintray下将Android Library 开源到JCenter 的正确姿势</a></p><p>另外，如果网络环境有问题无法正常使用compile指令（像我这样），良心提供 aar 文件下载使用。<br>下载链接：<a href="http://o9w936rbz.bkt.clouddn.com/blog/img/201704/1/lfilepickerlibrary.aar?attname=" target="_blank" rel="noopener">lfilepickerlibrary</a><br>【P.S.】 如果不知道 aar 如何使用，请参考文章：<a href="http://www.jianshu.com/p/cd80e0ee54d5" target="_blank" rel="noopener">Android中 aar 文件的日常使用</a></p><h3 id="2-添加文件读写权限"><a href="#2-添加文件读写权限" class="headerlink" title="2.添加文件读写权限"></a>2.添加文件读写权限</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.WRITE_EXTERNAL_STORAGE"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h3 id="3-打开选择界面"><a href="#3-打开选择界面" class="headerlink" title="3.打开选择界面"></a>3.打开选择界面</h3><p>你可以在Activity中打开：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">LFilePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withActivity</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withRequestCode</span><span class="token punctuation">(</span>Consant<span class="token punctuation">.</span>REQUESTCODE_FROM_ACTIVITY<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也可以在Fragment中打开(同时支持v4包SupportFragment)：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">LFilePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSupportFragment</span><span class="token punctuation">(</span>mFragment<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withRequestCode</span><span class="token punctuation">(</span>Consant<span class="token punctuation">.</span>REQUESTCODE_FROM_FRAGMENT<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withTitle</span><span class="token punctuation">(</span><span class="token string">"Open From Fragment"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-接收选择返回值"><a href="#4-接收选择返回值" class="headerlink" title="4.接收选择返回值"></a>4.接收选择返回值</h3><p>重写方法并获取数据：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onActivityResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> <span class="token keyword">int</span> resultCode<span class="token punctuation">,</span> Intent data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActivityResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> resultCode<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resultCode <span class="token operator">==</span> RESULT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCode <span class="token operator">==</span> Consant<span class="token punctuation">.</span>REQUESTCODE_FROM_ACTIVITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getStringArrayListExtra</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>RESULT_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span>            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"选中了"</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个文件"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>已经以上你已经能够正常使用了，但是说好的那么多特性呢？接下来，深入一点</p><h2 id="自由使用"><a href="#自由使用" class="headerlink" title="自由使用"></a>自由使用</h2><h3 id="文件夹和文件图标太low？换！"><a href="#文件夹和文件图标太low？换！" class="headerlink" title="文件夹和文件图标太low？换！"></a>文件夹和文件图标太low？换！</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">LFilePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withRequestCode</span><span class="token punctuation">(</span>Consant<span class="token punctuation">.</span>REQUESTCODE_FROM_ACTIVITY<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIconStyle</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>ICON_STYLE_YELLOW<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>withIconStyle(mIconType)提供三种风格：</p><ul><li>Constant.ICON_STYLE_YELLOW  经典黄（默认风格）</li><li>Constant.ICON_STYLE_GREEN   清新绿</li><li>Constant.ICON_STYLE_BLUE    柔和蓝</li></ul><center>![清新绿风格][5]</center><center>![柔和蓝风格][6]</center><h3 id="选择界面标题不合适？换！"><a href="#选择界面标题不合适？换！" class="headerlink" title="选择界面标题不合适？换！"></a>选择界面标题不合适？换！</h3><pre class=" language-java"><code class="language-java">  <span class="token keyword">new</span> <span class="token class-name">LFilePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withRequestCode</span><span class="token punctuation">(</span>Consant<span class="token punctuation">.</span>REQUESTCODE_FROM_ACTIVITY<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withTitle</span><span class="token punctuation">(</span><span class="token string">"我的标题"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//标题文字</span>                <span class="token punctuation">.</span><span class="token function">withTitleColor</span><span class="token punctuation">(</span><span class="token string">"#FF99CC"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//文字颜色</span>                <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><center>![标题和文字颜色效果][7]</center><h3 id="想要限制单选或者多选？换！"><a href="#想要限制单选或者多选？换！" class="headerlink" title="想要限制单选或者多选？换！"></a>想要限制单选或者多选？换！</h3><pre class=" language-java"><code class="language-java"> <span class="token keyword">new</span> <span class="token class-name">LFilePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withRequestCode</span><span class="token punctuation">(</span>Consant<span class="token punctuation">.</span>REQUESTCODE_FROM_ACTIVITY<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withMutilyMode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>withMutilyMode(true):true代表多选；false代表单选</p><center>![多选效果][8]</center><center>![单选效果][9]</center><h3 id="想要限制选择文件类型？过滤！"><a href="#想要限制选择文件类型？过滤！" class="headerlink" title="想要限制选择文件类型？过滤！"></a>想要限制选择文件类型？过滤！</h3><pre class=" language-java"><code class="language-java"> <span class="token keyword">new</span> <span class="token class-name">LFilePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withRequestCode</span><span class="token punctuation">(</span>Consant<span class="token punctuation">.</span>REQUESTCODE_FROM_ACTIVITY<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withFileFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">".txt"</span><span class="token punctuation">,</span> <span class="token string">".png"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><center>![默认不过滤效果][10]</center><center>![过滤后效果][11]</center><h3 id="英文怎么搞？已经内置实现！"><a href="#英文怎么搞？已经内置实现！" class="headerlink" title="英文怎么搞？已经内置实现！"></a>英文怎么搞？已经内置实现！</h3><p>将手机语言调整为英文后：</p><center>![英语环境操作][12]</center><h3 id="返回图标不喜欢？换！"><a href="#返回图标不喜欢？换！" class="headerlink" title="返回图标不喜欢？换！"></a>返回图标不喜欢？换！</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">LFilePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withRequestCode</span><span class="token punctuation">(</span>Consant<span class="token punctuation">.</span>REQUESTCODE_FROM_ACTIVITY<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withBackIcon</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>BACKICON_STYLEONE<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>withBackIcon() 提供三种风格：</p><ul><li>Constant.BACKICON_STYLEONE</li><li>Constant.BACKICON_STYLETWO</li><li>Constant.BACKICON_STYLETHREE</li></ul><center>![风格1][13]</center><center>![风格2][14]</center><center>![风格3][15]</center><h3 id="标题背景颜色不喜欢？换！"><a href="#标题背景颜色不喜欢？换！" class="headerlink" title="标题背景颜色不喜欢？换！"></a>标题背景颜色不喜欢？换！</h3><pre class=" language-java"><code class="language-java">  <span class="token keyword">new</span> <span class="token class-name">LFilePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withRequestCode</span><span class="token punctuation">(</span>Consant<span class="token punctuation">.</span>REQUESTCODE_FROM_ACTIVITY<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withBackgroundColor</span><span class="token punctuation">(</span><span class="token string">"#FF9966"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><center> ![ 背景颜色效果图][16]</center><h3 id="切换选择路径？已经包含，随便选！"><a href="#切换选择路径？已经包含，随便选！" class="headerlink" title="切换选择路径？已经包含，随便选！"></a>切换选择路径？已经包含，随便选！</h3><center>![路径选择效果][17]</center><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>基本上能够满足日常选择文件的需求了，开源不易，如果对你有用，欢迎<strong>Star</strong>给我一个小小的鼓励！谢谢.</p><blockquote><p>更多文章欢迎访问：<a href="https://leonhua.github.io/" target="_blank" rel="noopener">我的博客</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 自定义组件 </tag>
            
            <tag> filepicker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LSettingView--- 让你更加快速的实现设置界面</title>
      <link href="/2017/04/05/lsettingview-rang-ni-geng-jia-kuai-su-de-shi-xian-she-zhi-jie-mian/"/>
      <url>/2017/04/05/lsettingview-rang-ni-geng-jia-kuai-su-de-shi-xian-she-zhi-jie-mian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>版本已更新至1.7.0，最新功能请查看传送门：<br><a href="https://github.com/leonHua/LSettingView">https://github.com/leonHua/LSettingView</a></p></blockquote><blockquote><p>在APP开发中，几乎每个应用都会有设置界面。而设置界面每一个条目基本上样式也都是固定的。每次要么去重新写布局太浪费时间，要么就是拷贝布局改动又太繁琐，所以将每个条目封装起来，方便快速实现。</p></blockquote><p><a href="https://github.com/leonHua/LSettingView">github：https://github.com/leonHua/LSettingView</a></p><p>设置界面条目封装，同时包含：</p><ul><li>设置左侧图标</li><li>设置左侧文字</li><li>设置右侧图标</li><li>设置右侧图标是否显示</li><li>设置右侧为复选框样式</li><li>设置右侧为开关模式</li><li>设置右侧文字及样式</li></ul><blockquote><p> <strong>新增设置</strong></p></blockquote><ul><li><p>设置左侧图标大小</p></li><li><p>设置左侧图标和文字间距</p></li><li><p>代码动态更改左侧文字</p></li><li><p>代码动态更改右侧文字</p></li><li><p>复选框和切换按钮模式下增加选中状态监听</p><a id="more"></a></li></ul><h3 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h3><p><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LSettingView/snipaste20170525_114555.png?imageView2/0/w/500/h/1200" alt="效果1"><br><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LSettingView/Screenshot_20170331-144350.png?imageView2/0/w/500/h/1200" alt="效果2"><br><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LSettingView/Screenshot_20170331-144358.png?imageView2/0/w/500/h/1200" alt="效果3"><br><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LSettingView/Screenshot_1500614109.png?imageView2/0/w/500/h/1200" alt="效果4"><br><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LSettingView/Screenshot_1500614115.png?imageView2/0/w/500/h/1200" alt="效果5"><br><img src="http://o9w936rbz.bkt.clouddn.com/github/img/LSettingView/Screenshot_1500614211.png?imageView2/0/w/500/h/1200" alt="效果6"></p><h3 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h3><h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h4><pre><code>compile 'com.leon:lsettingviewlibrary:1.4.0'</code></pre><h4 id="2-在布局文件中引用"><a href="#2-在布局文件中引用" class="headerlink" title="2. 在布局文件中引用"></a>2. 在布局文件中引用</h4><pre><code>&lt;com.leon.lib.settingview.LSettingItem    xmlns:app="http://schemas.android.com/apk/res-auto"    android:id="@+id/item_one"    android:layout_width="match_parent"    android:layout_height="wrap_content"    leon:leftIcon="@drawable/history"    leon:leftText="我的消息"/&gt;</code></pre><h4 id="3-添加单击事件处理"><a href="#3-添加单击事件处理" class="headerlink" title="3. 添加单击事件处理"></a>3. 添加单击事件处理</h4><pre><code>LSettingItem mSettingItemOne = (LSettingItem) findViewById(R.id.item_one);mSettingItemOne.setmOnLSettingItemClick(new LSettingItem.OnLSettingItemClick() {            @Override            public void click(boolean isChecked) {                Toast.makeText(getApplicationContext(), "我的消息", Toast.LENGTH_SHORT).show();            }        }); //更改左侧文字       mSettingItemOne.setLeftText("左侧文字");//更改右侧文字mSettingItemOne.setRightText("右侧文字");</code></pre><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><h4 id="方法说明"><a href="#方法说明" class="headerlink" title="方法说明"></a>方法说明</h4><table><thead><tr><th>属性</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>leftText</td><td>左侧文字</td><td>string</td></tr><tr><td>leftIcon</td><td>左侧图标</td><td>integer</td></tr><tr><td>rightIcon</td><td>右侧图标</td><td>integer</td></tr><tr><td>textSize</td><td>左侧文字大小</td><td>dimension</td></tr><tr><td>textColor</td><td>左侧文字颜色</td><td>color</td></tr><tr><td>isShowUnderLine</td><td>是否显示底部分割线</td><td>boolean</td></tr><tr><td>rightStyle</td><td>右侧图标风格</td><td>enum</td></tr><tr><td>isShowRightText</td><td>是否显示右侧文字</td><td>boolean</td></tr><tr><td>rightText</td><td>右侧文字</td><td>string</td></tr><tr><td>rightTextSize</td><td>右侧文字大小</td><td>boolean</td></tr><tr><td>rightTextColor</td><td>右侧文字颜色</td><td>color</td></tr><tr><td>leftIconSize</td><td>左侧图标大小</td><td>dimension</td></tr><tr><td>leftTextMarginLeft</td><td>左侧图标与文字间距</td><td>dimension</td></tr><tr><td>#### 右侧图标风格</td><td></td><td></td></tr></tbody></table><ul><li>iconShow   显示图标</li><li>iconHide   隐藏图标</li><li>iconCheck  显示复选框</li><li>iconSwitch 显示切换开关</li></ul><hr><p>如果本库对你有用，欢迎star或者fork! 欢迎访问 <a href="https://leonhua.github.io/" target="_blank" rel="noopener">博客</a> 查看更多文章。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 自定义组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新版Bintray下将Android Library 开源到JCenter 的正确姿势</title>
      <link href="/2017/03/30/xin-ban-bintray-xia-jiang-android-library-kai-yuan-dao-jcenter-de-zheng-que-zi-shi/"/>
      <url>/2017/03/30/xin-ban-bintray-xia-jiang-android-library-kai-yuan-dao-jcenter-de-zheng-que-zi-shi/</url>
      
        <content type="html"><![CDATA[<p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/0.jpg?imageslim" alt=""></p><h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><p>对于经历过Eclipse开发时代的人来说，如今在Android Studio中通过 <strong>compile</strong> 命令来添加外部库引用简直爽的不要不要的，在使用github上数以千计的开源库时，最常用方式就是：compile ‘com.android.support:recyclerview-v7:23.4.0’，那么如何让自己写的库也能通过这样的方式引用呢？</p><p>其实就是将自己写好的库打包发布到JCenter即可，本来看着非常简单，但是实际做起来每一步都有很多坑等着你去踩。经历过从入门到失败到放弃到成功的过程后，现在将一步步的过程和雷区记录下来，希望能帮助别人越过深坑直达彼岸<del>~</del></p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="准备一个库"><a href="#准备一个库" class="headerlink" title="准备一个库"></a>准备一个库</h3><p>新建Module,选择Library</p><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/1.png" alt="Android Studio建库"></p><h3 id="注册谷歌邮箱账号"><a href="#注册谷歌邮箱账号" class="headerlink" title="注册谷歌邮箱账号"></a>注册谷歌邮箱账号</h3><p>我知道你不想翻墙，但你迟早需要这个账号的，早准备早升天。</p><h3 id="注册Bintray账号"><a href="#注册Bintray账号" class="headerlink" title="注册Bintray账号"></a>注册Bintray账号</h3><p>最终需要通过这个账号发布到JCenter上。注册地址官网：<a href="https://bintray.com/，这里就有一个坑，现在这个地址默认是注册组织的，注册后会有一个月试用期。" target="_blank" rel="noopener">https://bintray.com/，这里就有一个坑，现在这个地址默认是注册组织的，注册后会有一个月试用期。</a></p><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/1-2.png" alt="组织账号有试用期"></p><p>我们一般需要的是个人类型，正确的注册地址为：</p><blockquote><p><a href="https://bintray.com/signup/oss" target="_blank" rel="noopener">https://bintray.com/signup/oss</a></p></blockquote><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/2.png" alt="个人注册地址"><br>这里是没有填写组织名称的。可以使用第三方注册，常用的就是 github账号，需要注意：如果github账号绑定的邮箱不是gmail邮箱，Bintray无法注册成功。所以这个时候你需要完成第一步然后通过gmail邮箱完成注册。</p><h2 id="正式开始起飞"><a href="#正式开始起飞" class="headerlink" title="正式开始起飞"></a>正式开始起飞</h2><h3 id="创建组织"><a href="#创建组织" class="headerlink" title="创建组织"></a>创建组织</h3><p>使用注册账号登录后，点击 <strong>Add New Organization</strong></p><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/3.png" alt="创建组织-1"></p><p>接着下一步</p><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/4.png" alt="创建组织-2"></p><p>接着下一步</p><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/5.png" alt="创建组织-3"></p><p>最后点击create完成创建。</p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>点击 <strong>Add New Repository</strong> 创建仓库</p><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/6-1.png" alt="创建仓库-1"></p><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/6-2.png" alt="创建仓库-2"></p><p>创建成功后，在刚才的界面 <strong>Add New Repository</strong> 下面可以看到创建的仓库。点击进去查看详细信息，此时里面是空的。</p><h3 id="在Android-Studio-中添加配置"><a href="#在Android-Studio-中添加配置" class="headerlink" title="在Android Studio 中添加配置"></a>在Android Studio 中添加配置</h3><h4 id="主要涉及到的配置文件有三个："><a href="#主要涉及到的配置文件有三个：" class="headerlink" title="主要涉及到的配置文件有三个："></a>主要涉及到的配置文件有三个：</h4><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/9.png" alt="此处输入图片的描述"></p><ul><li>第一个：工程项目（project）的 build.gradle文件</li><li>第二个：模块库（module) 的 build.gradle文件</li><li>第三个：工程项目的 local.properties文件</li></ul><h4 id="配置第一个"><a href="#配置第一个" class="headerlink" title="配置第一个"></a>配置第一个</h4><p>在你Project的build.gradle文件中加入Maven和Jfrog Bintray的依赖插件：</p><pre><code> classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5' classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'</code></pre><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/8.png" alt="添加插件"></p><h4 id="配置第二个"><a href="#配置第二个" class="headerlink" title="配置第二个"></a>配置第二个</h4><p>第二项配置较多，可以参考下面完整的进行补充：</p><p><strong>P.S. 有注释的是需要替换自己的参数，其他复制即可</strong></p><pre class=" language-java"><code class="language-java">apply plugin<span class="token operator">:</span> <span class="token string">'com.android.library'</span>apply plugin<span class="token operator">:</span> <span class="token string">'com.jfrog.bintray'</span>apply plugin<span class="token operator">:</span> <span class="token string">'com.github.dcendents.android-maven'</span>def siteUrl <span class="token operator">=</span> <span class="token string">'https://github.com/leonHua/LFilePicker'</span>   <span class="token comment" spellcheck="true">// 项目的主页</span>def gitUrl <span class="token operator">=</span> <span class="token string">'https://github.com/leonHua/LFilePicker.git'</span>   <span class="token comment" spellcheck="true">// Git仓库的url</span>Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>project<span class="token punctuation">.</span>rootProject<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">'local.properties'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newDataInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>version <span class="token operator">=</span> <span class="token string">"1.0"</span> <span class="token comment" spellcheck="true">//发布版本号</span>group <span class="token operator">=</span> <span class="token string">"com.leon"</span> <span class="token comment" spellcheck="true">//最终引用形式，如compile 'com.leon.lfilepicker:1.0.0'，其中lfilepicker在后面配置</span>android <span class="token punctuation">{</span>    compileSdkVersion <span class="token number">25</span>    buildToolsVersion <span class="token string">"25.0.2"</span>    defaultConfig <span class="token punctuation">{</span>        minSdkVersion <span class="token number">15</span>        targetSdkVersion <span class="token number">25</span>        versionCode <span class="token number">1</span>        versionName <span class="token string">"1.0"</span>    <span class="token punctuation">}</span>    buildTypes <span class="token punctuation">{</span>        release <span class="token punctuation">{</span>            minifyEnabled <span class="token boolean">false</span>            proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span><span class="token string">'proguard-android.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'proguard-rules.pro'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    compile <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token operator">:</span> <span class="token string">'libs'</span><span class="token punctuation">,</span> include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'*.jar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    compile <span class="token string">'com.android.support:appcompat-v7:25.0.0'</span>    compile <span class="token string">'com.android.support:recyclerview-v7:25.0.0'</span><span class="token punctuation">}</span>bintray <span class="token punctuation">{</span>    user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"bintray.user"</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"bintray.apikey"</span><span class="token punctuation">)</span>    pkg <span class="token punctuation">{</span>        repo <span class="token operator">=</span> <span class="token string">'leonlibrary'</span><span class="token comment" spellcheck="true">//自己创建的仓库名字</span>        name <span class="token operator">=</span> <span class="token string">'lfilepicker'</span><span class="token comment" spellcheck="true">//上传到JCenter的名字,最终引用的名字</span>        websiteUrl <span class="token operator">=</span> siteUrl        vcsUrl <span class="token operator">=</span> gitUrl        licenses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'MIT'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//不能随便写，只能是仓库创建时选择的license type</span>        userOrg <span class="token operator">=</span> <span class="token string">'mumusalibrary'</span> <span class="token comment" spellcheck="true">//自己创建的organization名称</span>        publish <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 是否是公开项目，公开别人可以引用</span>        version <span class="token punctuation">{</span>            name <span class="token operator">=</span> <span class="token string">'1.0'</span>            desc <span class="token operator">=</span> <span class="token string">'leon open library.'</span><span class="token comment" spellcheck="true">//描述，自己定义</span>            released  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            vcsTag <span class="token operator">=</span> <span class="token string">'v1.0'</span>            attributes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gradle-plugin'</span><span class="token operator">:</span> <span class="token string">'com.use.less:com.use.less.gradle:gradle-useless-plugin'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    configurations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'archives'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>install <span class="token punctuation">{</span>    repositories<span class="token punctuation">.</span>mavenInstaller <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// This generates POM.xml with proper parameters</span>        pom <span class="token punctuation">{</span>            project <span class="token punctuation">{</span>                packaging <span class="token string">'aar'</span>                <span class="token comment" spellcheck="true">// Add your description here</span>                name <span class="token string">'Leon Android'</span>                description <span class="token string">'leon open library.'</span>                url siteUrl                <span class="token comment" spellcheck="true">// Set your license</span>                licenses <span class="token punctuation">{</span>                    license <span class="token punctuation">{</span>                        name <span class="token string">'MIT'</span> <span class="token comment" spellcheck="true">//和之前自己定义的协议一致</span>                        url <span class="token string">'https://raw.githubusercontent.com/minggo620/Pluto-Android/master/LICENSE'</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                developers <span class="token punctuation">{</span>                    developer <span class="token punctuation">{</span>                        id <span class="token string">'leonhua2017'</span>        <span class="token comment" spellcheck="true">//填写bintray或者github的用户名</span>                        name <span class="token string">'leonhua2017'</span>         <span class="token comment" spellcheck="true">//姓名</span>                        email <span class="token string">'leon.gitlibrary@gmail.com'</span><span class="token comment" spellcheck="true">//邮箱</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                scm <span class="token punctuation">{</span>                    connection gitUrl                    developerConnection gitUrl                    url siteUrl                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>task <span class="token function">sourcesJar</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Jar<span class="token punctuation">)</span> <span class="token punctuation">{</span>    from android<span class="token punctuation">.</span>sourceSets<span class="token punctuation">.</span>main<span class="token punctuation">.</span>java<span class="token punctuation">.</span>srcDirs    classifier <span class="token operator">=</span> <span class="token string">'sources'</span><span class="token punctuation">}</span>task <span class="token function">javadoc</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Javadoc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    failOnError <span class="token boolean">false</span> <span class="token comment" spellcheck="true">//必须添加以免出错</span>    source <span class="token operator">=</span> android<span class="token punctuation">.</span>sourceSets<span class="token punctuation">.</span>main<span class="token punctuation">.</span>java<span class="token punctuation">.</span>srcDirs    classpath <span class="token operator">+=</span> project<span class="token punctuation">.</span><span class="token function">files</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span><span class="token function">getBootClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>File<span class="token punctuation">.</span>pathSeparator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>task <span class="token function">javadocJar</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Jar<span class="token punctuation">,</span> dependsOn<span class="token operator">:</span> javadoc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    classifier <span class="token operator">=</span> <span class="token string">'javadoc'</span>    from javadoc<span class="token punctuation">.</span>destinationDir<span class="token punctuation">}</span>artifacts <span class="token punctuation">{</span>    archives javadocJar    archives sourcesJar<span class="token punctuation">}</span>javadoc <span class="token punctuation">{</span>    options<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果你的项目里面有中文注释的话，必须将格式设置为UTF-8，不然会出现乱码</span>        encoding <span class="token string">"UTF-8"</span>        charSet <span class="token string">'UTF-8'</span>        author <span class="token boolean">true</span>        version <span class="token boolean">true</span>        links <span class="token string">"http://docs.oracle.com/javase/7/docs/api"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上添加成功后，点击编译下项目，会下载一些插件东西，成功后继续。</p><h4 id="配置第三个"><a href="#配置第三个" class="headerlink" title="配置第三个"></a>配置第三个</h4><p>在local.properties中添加账户名称和apikey信息</p><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/9.png" alt="添加账户和apikey"></p><p>apikey信息可以通过以下方式获得：</p><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/10.png" alt="获取apikey"></p><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><p>在Android Studio中的Terminal窗口中输入命令：<strong>gradlew -v</strong><br>正常的话会显示版本信息，如果还没有安装的话会自动安装，安装后也会显示版本信息。</p><p>然后在输入命令：<strong>gradlew install</strong><br>此时也会显示下载安装一些东西，耐心等待即可，完成后显示“<em>BUILD</em> <em>SUCCESSFUL</em>”即表示成功。</p><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/11.png" alt="install 成功"></p><p>最后上传，在Terminal窗口输入命令：<strong>gradle bintrayUpload</strong><br>然后等待上传，显示“<em>BUILD SUCCESSFUL</em>”即表示成功。</p><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/12.png" alt="upload 成功"></p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>回到仓库页面可以看到刚才上传的项目：</p><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/13.png" alt="发布成功"></p><p>点击项目后进入详细界面，这个时候点击界面右下角的add to JCenter,然后输入描述发送即可。<br>然后等待审核，我这个比较快，10分钟就通过。</p><h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><h4 id="1：官网地址"><a href="#1：官网地址" class="headerlink" title="1：官网地址"></a>1：官网地址</h4><p>前面已经说过，注册地址一定要选对</p><h4 id="2：Unsupported-major-minor-version-52-0"><a href="#2：Unsupported-major-minor-version-52-0" class="headerlink" title="2：Unsupported major.minor version 52.0"></a>2：Unsupported major.minor version 52.0</h4><p>首先检查JDK版本问题，需要更换到JDK8，环境变量配置后一定记得需要在Android Studio中配置</p><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/14.png" alt="JDK配置"></p><p>如果JDK没问题，还有可能是Studio里各项配置的版本问题，查了很多资料，总的来说就是当前环境的整体配置版本（以下三项）要一致：</p><ul><li>compileSdkVersion</li><li>buildToolsVersio</li><li>gradle</li></ul><h4 id="3：-HTTP-1-1-401-Unauthorized"><a href="#3：-HTTP-1-1-401-Unauthorized" class="headerlink" title="3： HTTP/1.1 401 Unauthorized"></a>3： HTTP/1.1 401 Unauthorized</h4><p>这个一般是因为账号和apikey信息错误，仔细检查local.properties文件中的配置是否正确</p><h4 id="4：-gradlew-不是内部或外部命令"><a href="#4：-gradlew-不是内部或外部命令" class="headerlink" title="4： gradlew 不是内部或外部命令"></a>4： gradlew 不是内部或外部命令</h4><p> 配置gradle的环境变量，和配置JDK类似，如果配置过后还不行，所有的命令更换为 <strong>gradle</strong> 也可以。</p><h4 id="5：-路径问题"><a href="#5：-路径问题" class="headerlink" title="5： 路径问题"></a>5： 路径问题</h4><p> 如果环境中除了需要打包的库还有其他模块，那么在命令行窗口中需要先切换到对应的目录环境下再执行命令。</p><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/3/15.png" alt="路径"></p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>弄到这里终于算是成功了。发布到JCenter有很多种方式，这里只是用了其中的一种，自己做的时候也参考了很多文章，有一些时间早点的文章会出现很多莫名其妙的问题。可能别人成功实现的方法，自己在做的过程中还是会发生很多原文章中没有提（遇）到的问题。希望自己的总结可以帮到后来者，同时不可避免的还会有一些文中没有的问题出现，欢迎留言交流。</p><blockquote><p>欢迎访问博客： <a href="https://leonhua.github.io/" target="_blank" rel="noopener">https://leonhua.github.io/</a> ，查看更多文章。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Library </tag>
            
            <tag> github </tag>
            
            <tag> JCenter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android中 aar 文件的日常使用</title>
      <link href="/2017/03/29/android-zhong-aar-wen-jian-de-ri-chang-shi-yong/"/>
      <url>/2017/03/29/android-zhong-aar-wen-jian-de-ri-chang-shi-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在开发中遇到好用的开源库内心总是激动的，但是如果因为“网络问题”无法通过compile命令引用内心又是崩溃的，这个时候aar文件对于我们来说就是非常好的选择。</p></blockquote><h2 id="什么是aar"><a href="#什么是aar" class="headerlink" title="什么是aar"></a>什么是aar</h2><p>在Java开发中库的形式一般会以jar包的形式提供，但是jar包只能包含代码文件。在Android开发中经常会涉及到图片、布局等资源，这个时候aar文件可以把这些资源统一打包进来。</p><h2 id="如何打包aar"><a href="#如何打包aar" class="headerlink" title="如何打包aar"></a>如何打包aar</h2><h3 id="新建Library"><a href="#新建Library" class="headerlink" title="新建Library"></a>新建Library</h3><p>默认你已经建好了一个model，并且是Library形式的存在。</p><a id="more"></a><h3 id="选中Gradle视图窗口"><a href="#选中Gradle视图窗口" class="headerlink" title="选中Gradle视图窗口"></a>选中Gradle视图窗口</h3><p>点击Android Studio右侧Gradle，显示中选中你的库，然后依次选中Tasks–&gt;build–&gt;assembleRelease,然后双击运行即可。<br><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/1/snipaste20170324_102229.png" alt="选择视图窗口"></p><p>等待运行显示如下表示成功：</p><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201703/1/snipaste20170324_102428.png" alt="运行成功界面"></p><p>然后可以到 你的项目地址\build\outputs\aar 目录下找到生成的aar文件，选择release版本。</p><h3 id="使用-gradlew-assembleRelease-命令"><a href="#使用-gradlew-assembleRelease-命令" class="headerlink" title="使用 gradlew assembleRelease 命令"></a>使用 gradlew assembleRelease 命令</h3><p>在Android studio的Terminal命令行中输入gradlew assembleRelease 回车即可<br>注：命令方式有可能会失败，具体需要分析报错信息。如果命令方式失败可以使用上面的方法</p><h2 id="如何使用aar"><a href="#如何使用aar" class="headerlink" title="如何使用aar"></a>如何使用aar</h2><p>首先在project视图下，将aar文件添加到libs文件夹里</p><p>然后需要在使用的模块的build.gradle文件中添加如下配置：</p><pre class=" language-java"><code class="language-java">repositories <span class="token punctuation">{</span>    flatDir <span class="token punctuation">{</span>        dirs <span class="token string">'libs'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后在dependencies中添加配置：</p><pre><code>compile(name: 'lfilepickerlibrary-release', ext: 'aar')</code></pre><p>name 为需要引用的aar文件的文件名</p><h2 id="填坑之旅"><a href="#填坑之旅" class="headerlink" title="填坑之旅"></a>填坑之旅</h2><h3 id="ClassNotFoundException"><a href="#ClassNotFoundException" class="headerlink" title="ClassNotFoundException"></a>ClassNotFoundException</h3><p>运行后报找不到aar文件中的一个类，打开aar文件查看这个类明明存在。</p><p>…挣扎中…</p><p>经过分析（查找资料）发现原库中引用了第三方库（其实就是recyclerview）,但是打包成aar的时候好像并没有打入进来，解决方式：在新的工程中引入recyclerview，重新Rebulid后成功运行。</p><blockquote><p>P.S.：两者之间的版本号是否必须一致尚未测试</p></blockquote><h3 id="资源命名问题"><a href="#资源命名问题" class="headerlink" title="资源命名问题"></a>资源命名问题</h3><p>res下的资源名称很有可能会和依赖的aar库中的资源名称相同，引发资源重复引用。<br>处理方式为在打包aar库文件时，将资源名称以自己独有的格式命名，避免常规命名冲突。</p><h2 id="最后说两句"><a href="#最后说两句" class="headerlink" title="最后说两句"></a>最后说两句</h2><p>目前碰到的上面两个问题，可能会有以下其他的坑留作以后补充。<br>其实compile命令添加引用的方式是最方便的，但是对于“网络问题”无法正常使用的人来说aar文件就是救命稻草了，所以还是希望大牛们在开源的时候如果方便尽可能的提供一下这种方式。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> aar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio uggestion add &#39;tools replace=&quot;android theme&quot; 问题</title>
      <link href="/2017/03/25/android-studio-uggestion-add-tools-replace-android-theme-wen-ti/"/>
      <url>/2017/03/25/android-studio-uggestion-add-tools-replace-android-theme-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>项目中开发了一个库以供其他模块引用，完成后运行报如下问题：</p><pre class=" language-java"><code class="language-java">Suggestion<span class="token operator">:</span> add <span class="token string">'tools:replace="android:theme"'</span> to <span class="token operator">&lt;</span>application<span class="token operator">></span> element at AndroidManifest<span class="token punctuation">.</span>xml<span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">23</span><span class="token operator">:</span><span class="token number">19</span> to override<span class="token punctuation">.</span></code></pre><p>网上搜索了资料，原因大致如下：</p><blockquote><p>AS的Gradle插件默认会启用Manifest Merger Tool，若Library项目中也定义了与主项目相同的属性（例如默认生成的android:icon和android:theme），则此时会合并失败，并报上面的错误。</p></blockquote><p>解决方式为：在Manifest.xml的application标签下添加tools:replace=”android:icon, android:theme”（多个属性用,隔开，并且记住在manifest根标签上加入xmlns:tools=”<a href="http://schemas.android.com/tools&quot;，否则会找不到namespace哦）" target="_blank" rel="noopener">http://schemas.android.com/tools"，否则会找不到namespace哦）</a></p><p>然而我加上之后并没有预想的效果，不造为什么，最后用了一个变通的方式：将主题加在Activity上，同时还必须去掉application标签主题引用。运行不在报错。</p><blockquote><p>记录一下如果以后有更好的解决方式在更新。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> theme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ripple(波纹)和Palette(调色板)了解</title>
      <link href="/2017/03/13/ripple-bo-wen-he-palette-diao-se-ban/"/>
      <url>/2017/03/13/ripple-bo-wen-he-palette-diao-se-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="ripple-水波纹"><a href="#ripple-水波纹" class="headerlink" title="ripple 水波纹"></a>ripple 水波纹</h1><p>5.0之后按钮会自带水波纹效果，但是颜色是固定的。而且如果给按钮设置了背景后，水波纹效果就没了<br>如何给按钮添加自己想要的背景，还要有水波纹效果，还要能够定义水波纹颜色呢？<br>首先创建正常的背景xml文件：</p><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201701/4/snipaste20170118_162510.png" alt="此处输入图片的描述"></p><a id="more"></a><p>然后在res下创建drawable-v21，在里面创建相同的xml文件，然后修改内容如下，添加ripple节点。</p><blockquote><p>ripple节点只能在5.0以后使用，所以需要在drawable-v21里面定义</p></blockquote><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201701/4/snipaste20170118_162642.png" alt="此处输入图片的描述"><br><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201701/4/snipaste20170118_162724.png" alt="此处输入图片的描述"></p><p>最终效果图：</p><p><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201701/4/20170118.gif" alt="此处输入图片的描述"></p><ul><li>第一个按钮是添加了水波纹并且自定义颜色后的</li><li>第二个是普通定义背景颜色的（此时没有水波纹效果）</li><li>第三个是默认的没有添加背景的，会自动添加默认效果</li></ul><p>也可以使用系统提供的背景（两种效果，第一种有边界，第二种没有）：</p><pre><code>android:background="?android:attr/selectableItemBackground"  // 波纹超出边界  android:background="?android:attr/selectableItemBackgroundBorderless"  </code></pre><h1 id="Palette-调色板"><a href="#Palette-调色板" class="headerlink" title="Palette 调色板"></a>Palette 调色板</h1><p>可以从图片当中提取颜色，先记录下使用方法：</p><pre><code> // 根据上一个界面传入的图片资源 ID，获取图片的 Bitmap 对象。Bitmap bitmap = BitmapFactory.decodeResource(getResources(), mImgs[position]);// 创建一个 Pallette 对象Palette palette = Palette.from(bitmap).generate();// 提取对应颜色int color = palette.getVibrantColor(ContextCompat.getColor(this, android.R.color.darker_gray));</code></pre><p>可以获取的颜色分类：</p><ul><li>Vibrant （有活力的）</li><li>Vibrant dark（有活力的 暗色）</li><li>Vibrant light（有活力的 亮色）</li><li>Muted （柔和的）</li><li>Muted dark（柔和的 暗色）</li><li>Muted light（柔和的 亮色）</li></ul><p>效果如下：<br><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201701/4/snipaste20170118_164142.png" alt="此处输入图片的描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Ripple </tag>
            
            <tag> Palette </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android5.0之Toolbar详解</title>
      <link href="/2017/01/18/android5-0-zhi-toolbar-xiang-jie/"/>
      <url>/2017/01/18/android5-0-zhi-toolbar-xiang-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>搜索Toolbar相关文章满天飞，但是大都不是很全面，每次要用到的时候又要重头过滤一遍。而且随着版本升级很多较早的文章的方法已经失效，最近刚好好用到Toolbar，就将相关配置整理下，方便以后使用。</p></blockquote><p>环境说明：</p><ul><li>Android Studio 2.0</li><li>V7包版本：com.android.support:appcompat-v7:23.4.0</li><li>compileSdkVersion 23</li><li>buildToolsVersion “24.0.0”</li></ul><a id="more"></a><hr><h2 id="Toolbar-引入使用"><a href="#Toolbar-引入使用" class="headerlink" title="Toolbar 引入使用"></a>Toolbar 引入使用</h2><p>XML布局中加入：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toolbar        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/toolbar"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"?attr/actionBarSize"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>主题改为隐藏ActionBar:</p><pre class=" language-java"><code class="language-java">Theme<span class="token punctuation">.</span>AppCompat<span class="token punctuation">.</span>Light<span class="token punctuation">.</span>NoActionBar</code></pre><p>Activity代码中加入：</p><pre><code>    setContentView(R.layout.activity_main);    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);    setSupportActionBar(toolbar);</code></pre><p>此时运行效果：<br><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201701/3/snipaste20170117_171955.png" alt=""><br>添加背景色</p><pre class=" language-java"><code class="language-java">android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@color/colorPrimary"</span></code></pre><p>此时运行效果：<br><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201701/3/snipaste20170117_172023.png" alt=""></p><h2 id="基本属性设置"><a href="#基本属性设置" class="headerlink" title="基本属性设置"></a>基本属性设置</h2><pre class=" language-xml"><code class="language-xml">&lt;android.support.v7.widget.Toolbar        android:id="@+id/toolbar"        android:layout_width="match_parent"        android:layout_height="?attr/actionBarSize"        android:background="@color/colorPrimary"        app:navigationIcon="@mipmap/title_bar_back"//左侧图标        app:subtitle="子标题"        app:subtitleTextColor="#fff" //标题颜色        app:title="标题"        app:titleTextColor="#fff"/> //子标题颜色</code></pre><p>运行效果：<br><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201701/3/snipaste20170117_173016.png" alt=""><br>添加选项菜单<br>第一步创建菜单文件</p><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span>menu xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>      xmlns<span class="token operator">:</span>app<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res-auto"</span>      xmlns<span class="token operator">:</span>tools<span class="token operator">=</span><span class="token string">"http://schemas.android.com/tools"</span>      tools<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">".MainActivity"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/action_settings"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@mipmap/ic_launcher"</span>        android<span class="token operator">:</span>orderInCategory<span class="token operator">=</span><span class="token string">"100"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"settings"</span>        app<span class="token operator">:</span>showAsAction<span class="token operator">=</span><span class="token string">"never"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/action_share"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@mipmap/ic_action_share"</span>        android<span class="token operator">:</span>orderInCategory<span class="token operator">=</span><span class="token string">"100"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"settings"</span>        app<span class="token operator">:</span>showAsAction<span class="token operator">=</span><span class="token string">"ifRoom"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/action_search"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@mipmap/ic_action_search"</span>        android<span class="token operator">:</span>orderInCategory<span class="token operator">=</span><span class="token string">"100"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"settings"</span>        app<span class="token operator">:</span>showAsAction<span class="token operator">=</span><span class="token string">"ifRoom"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>menu<span class="token operator">></span></code></pre><p>第二部在代码中重写onCreateOptionsMenu方法加载菜单文件</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onCreateOptionsMenu</span><span class="token punctuation">(</span>Menu menu<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">getMenuInflater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>menu_main<span class="token punctuation">,</span> menu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​<br>此时效果：<br><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201701/3/snipaste20170118_084208.png" alt=""></p><h2 id="个性设置"><a href="#个性设置" class="headerlink" title="个性设置"></a>个性设置</h2><h3 id="左侧返回箭头"><a href="#左侧返回箭头" class="headerlink" title="左侧返回箭头"></a>左侧返回箭头</h3><p>想要显示自带的返回箭头，需要去掉之前设定的属性：</p><pre class=" language-java"><code class="language-java">app<span class="token operator">:</span>navigationIcon<span class="token operator">=</span><span class="token string">"@mipmap/title_bar_back"</span></code></pre><p>​<br>然后在代码中添加：</p><pre class=" language-JAVA"><code class="language-JAVA">getSupportActionBar().setHomeButtonEnabled(true); //设置返回键可用getSupportActionBar().setDisplayHomeAsUpEnabled(true);</code></pre><p>此时效果：<br><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201701/3/snipaste20170118_084810.png" alt=""></p><h3 id="溢出图标颜色"><a href="#溢出图标颜色" class="headerlink" title="溢出图标颜色"></a>溢出图标颜色</h3><p>在style文件中添加：</p><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 溢出菜单图标颜色<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"colorControlNormal"</span><span class="token operator">></span><span class="token annotation punctuation">@android</span><span class="token operator">:</span>color<span class="token operator">/</span>white<span class="token operator">&lt;</span><span class="token operator">/</span>item</code></pre><blockquote></blockquote><p>此时效果：<br><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201701/3/snipaste20170118_085126.png" alt=""></p><h3 id="自定义右侧溢出图标"><a href="#自定义右侧溢出图标" class="headerlink" title="自定义右侧溢出图标"></a>自定义右侧溢出图标</h3><p>在Style文件中添加：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>style name<span class="token operator">=</span><span class="token string">"AppTheme"</span> parent<span class="token operator">=</span><span class="token string">"Theme.AppCompat.Light.NoActionBar"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Customize your theme here<span class="token punctuation">.</span> <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"colorPrimary"</span><span class="token operator">></span><span class="token annotation punctuation">@color</span><span class="token operator">/</span>colorPrimary<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"colorPrimaryDark"</span><span class="token operator">></span><span class="token annotation punctuation">@color</span><span class="token operator">/</span>colorPrimaryDark<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"colorAccent"</span><span class="token operator">></span><span class="token annotation punctuation">@color</span><span class="token operator">/</span>colorAccent<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 溢出菜单图标颜色<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"colorControlNormal"</span><span class="token operator">></span><span class="token annotation punctuation">@android</span><span class="token operator">:</span>color<span class="token operator">/</span>white<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 溢出菜单图标自定义<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"android:actionOverflowButtonStyle"</span><span class="token operator">></span><span class="token annotation punctuation">@style</span><span class="token operator">/</span>OverflowButtonStyle<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>    <span class="token operator">&lt;</span>style name<span class="token operator">=</span><span class="token string">"OverflowButtonStyle"</span> parent<span class="token operator">=</span><span class="token string">"android:Widget.ActionButton.Overflow"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"android:src"</span><span class="token operator">></span><span class="token annotation punctuation">@mipmap</span><span class="token operator">/</span>ic_action_add<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>​<br>  此时运行效果：<br>​    <img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201701/3/snipaste20170118_085413.png" alt=""><br>​    </p><h3 id="更改弹出菜单背景"><a href="#更改弹出菜单背景" class="headerlink" title="更改弹出菜单背景"></a>更改弹出菜单背景</h3><p>在Style文件中添加样式：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> toolbar弹出菜单样式背景 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>style name<span class="token operator">=</span><span class="token string">"ToolbarPopupTheme"</span> parent<span class="token operator">=</span><span class="token string">"@style/ThemeOverlay.AppCompat"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"android:colorBackground"</span><span class="token operator">></span>#FFCC99<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>在布局文件中添加使用主题：</p><pre class=" language-JAVA"><code class="language-JAVA">app:popupTheme="@style/ToolbarPopupTheme"</code></pre><p>此时运行效果：<br><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201701/3/snipaste20170118_090253.png" alt=""></p><h3 id="更改弹出菜单文字颜色"><a href="#更改弹出菜单文字颜色" class="headerlink" title="更改弹出菜单文字颜色"></a>更改弹出菜单文字颜色</h3><p>添加样式文件：</p><pre class=" language-JAVA"><code class="language-JAVA"><style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">        <!-- Customize your theme here. -->        <item name="colorPrimary">@color/colorPrimary</item>        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>        <item name="colorAccent">@color/colorAccent</item>        <!-- 溢出菜单图标颜色-->        <item name="colorControlNormal">@android:color/white</item>        <item name="android:actionOverflowButtonStyle">@style/OverflowButtonStyle</item>        <!-- 溢出菜单文字颜色-->        <item name="textAppearanceLargePopupMenu">@style/Overflow_Menu_Text_style</item>    </style>    <!--溢出菜单文字颜色-->    <style name="Overflow_Menu_Text_style" parent="@style/TextAppearance.AppCompat.Widget.PopupMenu.Large">        <item name="android:textColor">#fff</item>    </style></code></pre><p>​    </p><p>此时运行效果：<br>    <img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201701/3/snipaste20170118_090616.png" alt="">    </p><h3 id="修改标题文字大小"><a href="#修改标题文字大小" class="headerlink" title="修改标题文字大小"></a>修改标题文字大小</h3><p> 添加配置：</p><pre class=" language-java"><code class="language-java"> app<span class="token operator">:</span>titleTextAppearance<span class="token operator">=</span><span class="token string">"@style/ToolbarTitleSize"</span></code></pre><p>​<br>添加style：</p><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> toolbar标题文字大小 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>style name<span class="token operator">=</span><span class="token string">"ToolbarTitleSize"</span> parent<span class="token operator">=</span><span class="token string">"@style/TextAppearance.Widget.AppCompat.Toolbar.Title"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"android:textSize"</span><span class="token operator">></span>28sp<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>此时运行效果：<br><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201701/3/snipaste20170118_091453.png" alt=""><br>子标题文字大小类似，添加配置然后定义style文件（此处省略）：</p><pre class=" language-java"><code class="language-java">app<span class="token operator">:</span>subtitleTextAppearance<span class="token operator">=</span><span class="token string">"@style/ToolbarTitleSize"</span></code></pre><h3 id="修改弹出菜单位置"><a href="#修改弹出菜单位置" class="headerlink" title="修改弹出菜单位置"></a>修改弹出菜单位置</h3><p>修改配置使弹出菜单显示在Toolbar下方：<br>首先重新设置属性：（在界面布局文件Toolbar中）</p><pre class=" language-java"><code class="language-java">app<span class="token operator">:</span>popupTheme<span class="token operator">=</span><span class="token string">"@style/OverflowMenuStyle"</span></code></pre><p>在Style文件中添加：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>style name<span class="token operator">=</span><span class="token string">"OverflowMenuStyle"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 是否覆盖锚点，默认为<span class="token boolean">true</span>，即盖住Toolbar <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"overlapAnchor"</span><span class="token operator">></span><span class="token boolean">false</span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"android:dropDownWidth"</span><span class="token operator">></span>wrap_content<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"android:paddingRight"</span><span class="token operator">></span>5dp<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 弹出层背景颜色 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"android:colorBackground"</span><span class="token operator">></span>#FFCC99<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 弹出层垂直方向上的偏移，即在竖直方向上距离Toolbar的距离，值为负则会盖住Toolbar <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"android:dropDownVerticalOffset"</span><span class="token operator">></span>5dp<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 弹出层水平方向上的偏移，即距离屏幕左边的距离，负值会导致右边出现空隙 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"android:dropDownHorizontalOffset"</span><span class="token operator">></span>0dp<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置弹出菜单文字颜色 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"android:textColor"</span><span class="token operator">></span>#0099CC<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>此时运行效果：<br><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201701/3/snipaste20170118_092349.png" alt=""></p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><h4 id="返回按钮事件"><a href="#返回按钮事件" class="headerlink" title="返回按钮事件"></a>返回按钮事件</h4><p>添加监听</p><pre class=" language-java"><code class="language-java">toolbar<span class="token punctuation">.</span><span class="token function">setNavigationOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"点击了返回箭头"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="菜单项点击事件"><a href="#菜单项点击事件" class="headerlink" title="菜单项点击事件"></a>菜单项点击事件</h4><p>重写方法</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onOptionsItemSelected</span><span class="token punctuation">(</span>MenuItem item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>action_settings<span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>action_search<span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>action_share<span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="自定义Toolbar"><a href="#自定义Toolbar" class="headerlink" title="自定义Toolbar"></a>自定义Toolbar</h3><p>Toolbar下面可以嵌套布局，直接将自己定义好的布局放到Toolbar下面即可</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toolbar        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"?attr/actionBarSize"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>RelativeLayout            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span><span class="token operator">></span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toolbar<span class="token operator">></span></code></pre><h3 id="Toolbar-和-DrawerLayout-左滑菜单"><a href="#Toolbar-和-DrawerLayout-左滑菜单" class="headerlink" title="Toolbar 和 DrawerLayout 左滑菜单"></a>Toolbar 和 DrawerLayout 左滑菜单</h3><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span>    <span class="token operator">&lt;</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>DrawerLayout     xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/drawer_left"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>侧滑菜单<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_gravity<span class="token operator">=</span><span class="token string">"start"</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"#CCCCFF"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>padding<span class="token operator">=</span><span class="token string">"10dp"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"选项一"</span>            android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"18sp"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>padding<span class="token operator">=</span><span class="token string">"10dp"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"选项二"</span>            android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"18sp"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>DrawerLayout<span class="token operator">></span></code></pre><p>添加左滑布局文件：</p><p>在主布局文件中引入：（在Toolbar下方）</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--DrawerLayout--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/custom_drawerlayout<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>在代码中添加关联：</p><pre class=" language-java"><code class="language-java">DrawerLayout mDrawerLayout <span class="token operator">=</span> <span class="token punctuation">(</span>DrawerLayout<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>drawer_left<span class="token punctuation">)</span><span class="token punctuation">;</span>    ActionBarDrawerToggle mDrawerToggle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActionBarDrawerToggle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> mDrawerLayout<span class="token punctuation">,</span> toolbar<span class="token punctuation">,</span> R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>open<span class="token punctuation">,</span> R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>close<span class="token punctuation">)</span><span class="token punctuation">;</span>    mDrawerToggle<span class="token punctuation">.</span><span class="token function">syncState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mDrawerLayout<span class="token punctuation">.</span><span class="token function">setDrawerListener</span><span class="token punctuation">(</span>mDrawerToggle<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>此时运行效果：<br><img src="http://o9w936rbz.bkt.clouddn.com/blog/img/201701/3/snipaste20170118_101634.png" alt=""><br>新版本studio，在新建Activity的时候可以选择对应的模板，会自动创建好DrawerLayout并关联Toolbar.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
